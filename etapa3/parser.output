Terminals which are not used

   TOKEN_ERROR


State 37 conflicts: 1 shift/reduce
State 48 conflicts: 3 shift/reduce
State 91 conflicts: 6 shift/reduce
State 99 conflicts: 3 shift/reduce
State 107 conflicts: 13 shift/reduce, 9 reduce/reduce
State 147 conflicts: 6 shift/reduce
State 163 conflicts: 7 shift/reduce
State 183 conflicts: 1 shift/reduce
State 204 conflicts: 6 shift/reduce
State 218 conflicts: 6 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ldec

    2 ldec: dec ldec
    3     | /* empty */

    4 dec: KW_IF '(' exp ')' KW_THEN lcmd
    5    | KW_IF '(' exp ')' KW_THEN lcmd KW_ELSE lcmd
    6    | KW_WHILE '(' exp ')' lcmd
    7    | KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd
    8    | func_dec
    9    | KW_FLOAT TK_IDENTIFIER '=' exp ';'
   10    | KW_CHAR TK_IDENTIFIER '=' exp ';'
   11    | KW_INT TK_IDENTIFIER '=' exp ';'
   12    | KW_INT TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   13    | KW_INT TK_IDENTIFIER '[' exp ']' ';'
   14    | KW_FLOAT TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   15    | KW_FLOAT TK_IDENTIFIER '[' exp ']' ';'
   16    | KW_CHAR TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   17    | KW_CHAR TK_IDENTIFIER '[' exp ']' ';'
   18    | KW_FLOAT '#' TK_IDENTIFIER '=' exp ';'
   19    | KW_CHAR '#' TK_IDENTIFIER '=' exp ';'
   20    | KW_INT '#' TK_IDENTIFIER '=' exp ';'

   21 reset: ',' func_args reset
   22      | /* empty */

   23 block: '{' lcmd '}'
   24      | /* empty */

   25 lcmd: cmd ';' lcmd
   26     | /* empty */
   27     | cmd ';' cmd lcmd
   28     | dec

   29 cmd: block
   30    | TK_IDENTIFIER '=' exp
   31    | '#' TK_IDENTIFIER '=' exp
   32    | '&' TK_IDENTIFIER '=' exp
   33    | TK_IDENTIFIER '=' '#' exp
   34    | TK_IDENTIFIER '=' '&' exp
   35    | TK_IDENTIFIER '[' exp ']' '=' exp
   36    | '#' TK_IDENTIFIER '[' exp ']' '=' exp
   37    | '&' TK_IDENTIFIER '[' exp ']' '=' exp
   38    | TK_IDENTIFIER '=' '#' exp '[' exp ']'
   39    | TK_IDENTIFIER '=' '&' exp '[' exp ']'
   40    | TK_IDENTIFIER '(' l_func_args reset ')'
   41    | print
   42    | read
   43    | KW_RETURN exp

   44 lit: LIT_INTEGER
   45    | LIT_REAL
   46    | LIT_CHAR

   47 vet_dec: lit vet_dec
   48        | lit

   49 exp: TK_IDENTIFIER
   50    | TK_IDENTIFIER '[' exp ']'
   51    | LIT_CHAR
   52    | LIT_REAL
   53    | LIT_INTEGER
   54    | exp '+' exp
   55    | exp '-' exp
   56    | exp '*' exp
   57    | exp '/' exp
   58    | exp '<' exp
   59    | exp '>' exp
   60    | '!' exp
   61    | exp OPERATOR_LE exp
   62    | exp OPERATOR_GE exp
   63    | exp OPERATOR_EQ exp
   64    | exp OPERATOR_NE exp
   65    | exp OPERATOR_AND exp
   66    | exp OPERATOR_OR exp
   67    | TK_IDENTIFIER '(' l_func_args reset ')'
   68    | '(' exp ')'

   69 func_args: LIT_REAL
   70          | LIT_CHAR
   71          | LIT_INTEGER
   72          | TK_IDENTIFIER
   73          | '#' TK_IDENTIFIER
   74          | '&' TK_IDENTIFIER

   75 l_func_args: func_args l_func_args
<<<<<<< Updated upstream
   76            | %empty
=======
   76            | /* empty */
>>>>>>> Stashed changes

   77 func_dec: func_header block

   78 func_header: KW_INT TK_IDENTIFIER '(' l_func_par reset_func_par ')'
   79            | KW_FLOAT TK_IDENTIFIER '(' l_func_par reset_func_par ')'
   80            | KW_CHAR TK_IDENTIFIER '(' l_func_par reset_func_par ')'

   81 func_par: KW_INT TK_IDENTIFIER
   82         | KW_FLOAT TK_IDENTIFIER
   83         | KW_CHAR TK_IDENTIFIER

   84 l_func_par: func_par l_func_par
<<<<<<< Updated upstream
   85           | %empty

   86 reset_func_par: ',' func_par reset_func_par
   87               | %empty
=======
   85           | /* empty */

   86 reset_func_par: ',' func_par reset_func_par
   87               | /* empty */
>>>>>>> Stashed changes

   88 print: KW_PRINT lpe

   89 pe: LIT_STRING
   90   | TK_IDENTIFIER
   91   | '&' TK_IDENTIFIER
   92   | '#' TK_IDENTIFIER

   93 lpe: pe lpe
<<<<<<< Updated upstream
   94    | %empty
=======
   94    | /* empty */
>>>>>>> Stashed changes

   95 read: KW_READ TK_IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 60
'#' (35) 18 19 20 31 33 36 38 73 92
'&' (38) 32 34 37 39 74 91
'(' (40) 4 5 6 7 40 67 68 78 79 80
')' (41) 4 5 6 7 40 67 68 78 79 80
'*' (42) 56
'+' (43) 54
',' (44) 21 86
'-' (45) 55
'/' (47) 57
':' (58) 12 14 16
';' (59) 9 10 11 12 13 14 15 16 17 18 19 20 25 27
'<' (60) 58
'=' (61) 7 9 10 11 18 19 20 30 31 32 33 34 35 36 37 38 39
'>' (62) 59
'[' (91) 12 13 14 15 16 17 35 36 37 38 39 50
']' (93) 12 13 14 15 16 17 35 36 37 38 39 50
'{' (123) 23
'}' (125) 23
error (256)
KW_CHAR (258) 10 16 17 19 80 83
KW_INT (259) 11 12 13 20 78 81
KW_FLOAT (260) 9 14 15 18 79 82
KW_IF (261) 4 5
KW_THEN (262) 4 5
KW_ELSE (263) 5
KW_WHILE (264) 6
KW_FOR (265) 7
KW_READ (266) 95
KW_RETURN (267) 43
KW_PRINT (268) 88
KW_TO (269) 7
OPERATOR_LE (270) 61
OPERATOR_GE (271) 62
OPERATOR_EQ (272) 63
OPERATOR_NE (273) 64
OPERATOR_AND (274) 65
OPERATOR_OR (275) 66
TK_IDENTIFIER (276) 7 9 10 11 12 13 14 15 16 17 18 19 20 30 31 32 33
    34 35 36 37 38 39 40 49 50 67 72 73 74 78 79 80 81 82 83 90 91
    92 95
LIT_INTEGER (277) 44 53 71
LIT_REAL (278) 45 52 69
LIT_CHAR (279) 46 51 70
LIT_STRING (280) 89
TOKEN_ERROR (281)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
ldec (48)
    on left: 2 3, on right: 1 2
dec (49)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20,
    on right: 2 28
reset (50)
    on left: 21 22, on right: 21 40 67
block (51)
    on left: 23 24, on right: 29 77
lcmd (52)
    on left: 25 26 27 28, on right: 4 5 6 7 23 25 27
cmd (53)
    on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43,
    on right: 25 27
lit (54)
    on left: 44 45 46, on right: 47 48
vet_dec (55)
    on left: 47 48, on right: 12 14 16 47
exp (56)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66
    67 68, on right: 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20 30
    31 32 33 34 35 36 37 38 39 43 50 54 55 56 57 58 59 60 61 62 63
    64 65 66 68
func_args (57)
    on left: 69 70 71 72 73 74, on right: 21 75
l_func_args (58)
    on left: 75 76, on right: 40 67 75
func_dec (59)
    on left: 77, on right: 8
func_header (60)
    on left: 78 79 80, on right: 77
func_par (61)
    on left: 81 82 83, on right: 84 86
l_func_par (62)
    on left: 84 85, on right: 78 79 80 84
reset_func_par (63)
    on left: 86 87, on right: 78 79 80 86
print (64)
    on left: 88, on right: 41
pe (65)
    on left: 89 90 91 92, on right: 93
lpe (66)
    on left: 93 94, on right: 88 93
read (67)
    on left: 95, on right: 42


state 0

    0 $accept: . program $end

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3
    KW_IF     shift, and go to state 4
    KW_WHILE  shift, and go to state 5
    KW_FOR    shift, and go to state 6

    $default  reduce using rule 3 (ldec)

    program      go to state 7
    ldec         go to state 8
    dec          go to state 9
    func_dec     go to state 10
    func_header  go to state 11


state 1

   10 dec: KW_CHAR . TK_IDENTIFIER '=' exp ';'
   16    | KW_CHAR . TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   17    | KW_CHAR . TK_IDENTIFIER '[' exp ']' ';'
   19    | KW_CHAR . '#' TK_IDENTIFIER '=' exp ';'
   80 func_header: KW_CHAR . TK_IDENTIFIER '(' l_func_par reset_func_par ')'

    TK_IDENTIFIER  shift, and go to state 12
    '#'            shift, and go to state 13


state 2

   11 dec: KW_INT . TK_IDENTIFIER '=' exp ';'
   12    | KW_INT . TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   13    | KW_INT . TK_IDENTIFIER '[' exp ']' ';'
   20    | KW_INT . '#' TK_IDENTIFIER '=' exp ';'
   78 func_header: KW_INT . TK_IDENTIFIER '(' l_func_par reset_func_par ')'

    TK_IDENTIFIER  shift, and go to state 14
    '#'            shift, and go to state 15


state 3

    9 dec: KW_FLOAT . TK_IDENTIFIER '=' exp ';'
   14    | KW_FLOAT . TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   15    | KW_FLOAT . TK_IDENTIFIER '[' exp ']' ';'
   18    | KW_FLOAT . '#' TK_IDENTIFIER '=' exp ';'
   79 func_header: KW_FLOAT . TK_IDENTIFIER '(' l_func_par reset_func_par ')'

    TK_IDENTIFIER  shift, and go to state 16
    '#'            shift, and go to state 17


state 4

    4 dec: KW_IF . '(' exp ')' KW_THEN lcmd
    5    | KW_IF . '(' exp ')' KW_THEN lcmd KW_ELSE lcmd

    '('  shift, and go to state 18


state 5

    6 dec: KW_WHILE . '(' exp ')' lcmd

    '('  shift, and go to state 19


state 6

    7 dec: KW_FOR . '(' TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd

    '('  shift, and go to state 20


state 7

    0 $accept: program . $end

    $end  shift, and go to state 21


state 8

    1 program: ldec .

    $default  reduce using rule 1 (program)


state 9

    2 ldec: dec . ldec

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3
    KW_IF     shift, and go to state 4
    KW_WHILE  shift, and go to state 5
    KW_FOR    shift, and go to state 6

    $default  reduce using rule 3 (ldec)

    ldec         go to state 22
    dec          go to state 9
    func_dec     go to state 10
    func_header  go to state 11


state 10

    8 dec: func_dec .

    $default  reduce using rule 8 (dec)


state 11

   77 func_dec: func_header . block

    '{'  shift, and go to state 23

    $default  reduce using rule 24 (block)

    block  go to state 24


state 12

   10 dec: KW_CHAR TK_IDENTIFIER . '=' exp ';'
   16    | KW_CHAR TK_IDENTIFIER . '[' exp ']' ':' vet_dec ';'
   17    | KW_CHAR TK_IDENTIFIER . '[' exp ']' ';'
   80 func_header: KW_CHAR TK_IDENTIFIER . '(' l_func_par reset_func_par ')'

    '='  shift, and go to state 25
    '('  shift, and go to state 26
    '['  shift, and go to state 27


state 13

   19 dec: KW_CHAR '#' . TK_IDENTIFIER '=' exp ';'

    TK_IDENTIFIER  shift, and go to state 28


state 14

   11 dec: KW_INT TK_IDENTIFIER . '=' exp ';'
   12    | KW_INT TK_IDENTIFIER . '[' exp ']' ':' vet_dec ';'
   13    | KW_INT TK_IDENTIFIER . '[' exp ']' ';'
   78 func_header: KW_INT TK_IDENTIFIER . '(' l_func_par reset_func_par ')'

    '='  shift, and go to state 29
    '('  shift, and go to state 30
    '['  shift, and go to state 31


state 15

   20 dec: KW_INT '#' . TK_IDENTIFIER '=' exp ';'

    TK_IDENTIFIER  shift, and go to state 32


state 16

    9 dec: KW_FLOAT TK_IDENTIFIER . '=' exp ';'
   14    | KW_FLOAT TK_IDENTIFIER . '[' exp ']' ':' vet_dec ';'
   15    | KW_FLOAT TK_IDENTIFIER . '[' exp ']' ';'
   79 func_header: KW_FLOAT TK_IDENTIFIER . '(' l_func_par reset_func_par ')'

    '='  shift, and go to state 33
    '('  shift, and go to state 34
    '['  shift, and go to state 35


state 17

   18 dec: KW_FLOAT '#' . TK_IDENTIFIER '=' exp ';'

    TK_IDENTIFIER  shift, and go to state 36


state 18

    4 dec: KW_IF '(' . exp ')' KW_THEN lcmd
    5    | KW_IF '(' . exp ')' KW_THEN lcmd KW_ELSE lcmd

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 43


state 19

    6 dec: KW_WHILE '(' . exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 44


state 20

    7 dec: KW_FOR '(' . TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 45


state 21

    0 $accept: program $end .

    $default  accept


state 22

    2 ldec: dec ldec .

    $default  reduce using rule 2 (ldec)


state 23

   23 block: '{' . lcmd '}'

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 46
    KW_RETURN      shift, and go to state 47
    KW_PRINT       shift, and go to state 48
    TK_IDENTIFIER  shift, and go to state 49
    '#'            shift, and go to state 50
    '{'            shift, and go to state 23
    '&'            shift, and go to state 51

    '}'       reduce using rule 26 (lcmd)
    $default  reduce using rule 24 (block)

    dec          go to state 52
    block        go to state 53
    lcmd         go to state 54
    cmd          go to state 55
    func_dec     go to state 10
    func_header  go to state 11
    print        go to state 56
    read         go to state 57


state 24

   77 func_dec: func_header block .

    $default  reduce using rule 77 (func_dec)


state 25

   10 dec: KW_CHAR TK_IDENTIFIER '=' . exp ';'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 58


state 26

   80 func_header: KW_CHAR TK_IDENTIFIER '(' . l_func_par reset_func_par ')'

    KW_CHAR   shift, and go to state 59
    KW_INT    shift, and go to state 60
    KW_FLOAT  shift, and go to state 61

    $default  reduce using rule 85 (l_func_par)

    func_par    go to state 62
    l_func_par  go to state 63


state 27

   16 dec: KW_CHAR TK_IDENTIFIER '[' . exp ']' ':' vet_dec ';'
   17    | KW_CHAR TK_IDENTIFIER '[' . exp ']' ';'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 64


state 28

   19 dec: KW_CHAR '#' TK_IDENTIFIER . '=' exp ';'

    '='  shift, and go to state 65


state 29

   11 dec: KW_INT TK_IDENTIFIER '=' . exp ';'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 66


state 30

   78 func_header: KW_INT TK_IDENTIFIER '(' . l_func_par reset_func_par ')'

    KW_CHAR   shift, and go to state 59
    KW_INT    shift, and go to state 60
    KW_FLOAT  shift, and go to state 61

    $default  reduce using rule 85 (l_func_par)

    func_par    go to state 62
    l_func_par  go to state 67


state 31

   12 dec: KW_INT TK_IDENTIFIER '[' . exp ']' ':' vet_dec ';'
   13    | KW_INT TK_IDENTIFIER '[' . exp ']' ';'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 68


state 32

   20 dec: KW_INT '#' TK_IDENTIFIER . '=' exp ';'

    '='  shift, and go to state 69


state 33

    9 dec: KW_FLOAT TK_IDENTIFIER '=' . exp ';'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 70


state 34

   79 func_header: KW_FLOAT TK_IDENTIFIER '(' . l_func_par reset_func_par ')'

    KW_CHAR   shift, and go to state 59
    KW_INT    shift, and go to state 60
    KW_FLOAT  shift, and go to state 61

    $default  reduce using rule 85 (l_func_par)

    func_par    go to state 62
    l_func_par  go to state 71


state 35

   14 dec: KW_FLOAT TK_IDENTIFIER '[' . exp ']' ':' vet_dec ';'
   15    | KW_FLOAT TK_IDENTIFIER '[' . exp ']' ';'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 72


state 36

   18 dec: KW_FLOAT '#' TK_IDENTIFIER . '=' exp ';'

    '='  shift, and go to state 73


state 37

   49 exp: TK_IDENTIFIER .
   50    | TK_IDENTIFIER . '[' exp ']'
   67    | TK_IDENTIFIER . '(' l_func_args reset ')'

    '('  shift, and go to state 74
    '['  shift, and go to state 75

    '['       [reduce using rule 49 (exp)]
    $default  reduce using rule 49 (exp)


state 38

   53 exp: LIT_INTEGER .

    $default  reduce using rule 53 (exp)


state 39

   52 exp: LIT_REAL .

    $default  reduce using rule 52 (exp)


state 40

   51 exp: LIT_CHAR .

    $default  reduce using rule 51 (exp)


state 41

   60 exp: '!' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 76


state 42

   68 exp: '(' . exp ')'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 77


state 43

    4 dec: KW_IF '(' exp . ')' KW_THEN lcmd
    5    | KW_IF '(' exp . ')' KW_THEN lcmd KW_ELSE lcmd
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ')'           shift, and go to state 90


state 44

    6 dec: KW_WHILE '(' exp . ')' lcmd
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ')'           shift, and go to state 91


state 45

    7 dec: KW_FOR '(' TK_IDENTIFIER . '=' exp KW_TO exp ')' lcmd

    '='  shift, and go to state 92


state 46

   95 read: KW_READ . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 93


state 47

   43 cmd: KW_RETURN . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 94


state 48

   88 print: KW_PRINT . lpe

    TK_IDENTIFIER  shift, and go to state 95
    LIT_STRING     shift, and go to state 96
    '#'            shift, and go to state 97
    '&'            shift, and go to state 98

    TK_IDENTIFIER  [reduce using rule 94 (lpe)]
    '#'            [reduce using rule 94 (lpe)]
    '&'            [reduce using rule 94 (lpe)]
    $default       reduce using rule 94 (lpe)

    pe   go to state 99
    lpe  go to state 100


state 49

   30 cmd: TK_IDENTIFIER . '=' exp
   33    | TK_IDENTIFIER . '=' '#' exp
   34    | TK_IDENTIFIER . '=' '&' exp
   35    | TK_IDENTIFIER . '[' exp ']' '=' exp
   38    | TK_IDENTIFIER . '=' '#' exp '[' exp ']'
   39    | TK_IDENTIFIER . '=' '&' exp '[' exp ']'
   40    | TK_IDENTIFIER . '(' l_func_args reset ')'

    '='  shift, and go to state 101
    '('  shift, and go to state 102
    '['  shift, and go to state 103


state 50

   31 cmd: '#' . TK_IDENTIFIER '=' exp
   36    | '#' . TK_IDENTIFIER '[' exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 104


state 51

   32 cmd: '&' . TK_IDENTIFIER '=' exp
   37    | '&' . TK_IDENTIFIER '[' exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 105


state 52

   28 lcmd: dec .

    $default  reduce using rule 28 (lcmd)


state 53

   29 cmd: block .

    $default  reduce using rule 29 (cmd)


state 54

   23 block: '{' lcmd . '}'

    '}'  shift, and go to state 106


state 55

   25 lcmd: cmd . ';' lcmd
   27     | cmd . ';' cmd lcmd

    ';'  shift, and go to state 107


state 56

   41 cmd: print .

    $default  reduce using rule 41 (cmd)


state 57

   42 cmd: read .

    $default  reduce using rule 42 (cmd)


state 58

   10 dec: KW_CHAR TK_IDENTIFIER '=' exp . ';'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ';'           shift, and go to state 108


state 59

   83 func_par: KW_CHAR . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 109


state 60

   81 func_par: KW_INT . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 110


state 61

   82 func_par: KW_FLOAT . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 111


state 62

   84 l_func_par: func_par . l_func_par

    KW_CHAR   shift, and go to state 59
    KW_INT    shift, and go to state 60
    KW_FLOAT  shift, and go to state 61

    $default  reduce using rule 85 (l_func_par)

    func_par    go to state 62
    l_func_par  go to state 112


state 63

   80 func_header: KW_CHAR TK_IDENTIFIER '(' l_func_par . reset_func_par ')'

    ','  shift, and go to state 113

    $default  reduce using rule 87 (reset_func_par)

    reset_func_par  go to state 114


state 64

   16 dec: KW_CHAR TK_IDENTIFIER '[' exp . ']' ':' vet_dec ';'
   17    | KW_CHAR TK_IDENTIFIER '[' exp . ']' ';'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ']'           shift, and go to state 115


state 65

   19 dec: KW_CHAR '#' TK_IDENTIFIER '=' . exp ';'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 116


state 66

   11 dec: KW_INT TK_IDENTIFIER '=' exp . ';'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ';'           shift, and go to state 117


state 67

   78 func_header: KW_INT TK_IDENTIFIER '(' l_func_par . reset_func_par ')'

    ','  shift, and go to state 113

    $default  reduce using rule 87 (reset_func_par)

    reset_func_par  go to state 118


state 68

   12 dec: KW_INT TK_IDENTIFIER '[' exp . ']' ':' vet_dec ';'
   13    | KW_INT TK_IDENTIFIER '[' exp . ']' ';'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ']'           shift, and go to state 119


state 69

   20 dec: KW_INT '#' TK_IDENTIFIER '=' . exp ';'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 120


state 70

    9 dec: KW_FLOAT TK_IDENTIFIER '=' exp . ';'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ';'           shift, and go to state 121


state 71

   79 func_header: KW_FLOAT TK_IDENTIFIER '(' l_func_par . reset_func_par ')'

    ','  shift, and go to state 113

    $default  reduce using rule 87 (reset_func_par)

    reset_func_par  go to state 122


state 72

   14 dec: KW_FLOAT TK_IDENTIFIER '[' exp . ']' ':' vet_dec ';'
   15    | KW_FLOAT TK_IDENTIFIER '[' exp . ']' ';'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ']'           shift, and go to state 123


state 73

   18 dec: KW_FLOAT '#' TK_IDENTIFIER '=' . exp ';'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 124


state 74

   67 exp: TK_IDENTIFIER '(' . l_func_args reset ')'

    TK_IDENTIFIER  shift, and go to state 125
    LIT_INTEGER    shift, and go to state 126
    LIT_REAL       shift, and go to state 127
    LIT_CHAR       shift, and go to state 128
    '#'            shift, and go to state 129
    '&'            shift, and go to state 130

    $default  reduce using rule 76 (l_func_args)

    func_args    go to state 131
    l_func_args  go to state 132


state 75

   50 exp: TK_IDENTIFIER '[' . exp ']'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 133


state 76

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   60    | '!' exp .
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 60 (exp)


state 77

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp
   68    | '(' exp . ')'

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ')'           shift, and go to state 134


state 78

   61 exp: exp OPERATOR_LE . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 135


state 79

   62 exp: exp OPERATOR_GE . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 136


state 80

   63 exp: exp OPERATOR_EQ . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 137


state 81

   64 exp: exp OPERATOR_NE . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 138


state 82

   65 exp: exp OPERATOR_AND . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 139


state 83

   66 exp: exp OPERATOR_OR . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 140


state 84

   58 exp: exp '<' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 141


state 85

   59 exp: exp '>' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 142


state 86

   54 exp: exp '+' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 143


state 87

   55 exp: exp '-' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 144


state 88

   56 exp: exp '*' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 145


state 89

   57 exp: exp '/' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 146


state 90

    4 dec: KW_IF '(' exp ')' . KW_THEN lcmd
    5    | KW_IF '(' exp ')' . KW_THEN lcmd KW_ELSE lcmd

    KW_THEN  shift, and go to state 147


state 91

    6 dec: KW_WHILE '(' exp ')' . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 46
    KW_RETURN      shift, and go to state 47
    KW_PRINT       shift, and go to state 48
    TK_IDENTIFIER  shift, and go to state 49
    '#'            shift, and go to state 50
    '{'            shift, and go to state 23
    '&'            shift, and go to state 51

    KW_CHAR   [reduce using rule 26 (lcmd)]
    KW_INT    [reduce using rule 26 (lcmd)]
    KW_FLOAT  [reduce using rule 26 (lcmd)]
    KW_IF     [reduce using rule 26 (lcmd)]
    KW_WHILE  [reduce using rule 26 (lcmd)]
    KW_FOR    [reduce using rule 26 (lcmd)]
    ';'       reduce using rule 24 (block)
    $default  reduce using rule 26 (lcmd)

    dec          go to state 52
    block        go to state 53
    lcmd         go to state 148
    cmd          go to state 55
    func_dec     go to state 10
    func_header  go to state 11
    print        go to state 56
    read         go to state 57


state 92

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' . exp KW_TO exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 149


state 93

   95 read: KW_READ TK_IDENTIFIER .

    $default  reduce using rule 95 (read)


state 94

   43 cmd: KW_RETURN exp .
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 43 (cmd)


state 95

   90 pe: TK_IDENTIFIER .

    $default  reduce using rule 90 (pe)


state 96

   89 pe: LIT_STRING .

    $default  reduce using rule 89 (pe)


state 97

   92 pe: '#' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 150


state 98

   91 pe: '&' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 151


state 99

   93 lpe: pe . lpe

    TK_IDENTIFIER  shift, and go to state 95
    LIT_STRING     shift, and go to state 96
    '#'            shift, and go to state 97
    '&'            shift, and go to state 98

    TK_IDENTIFIER  [reduce using rule 94 (lpe)]
    '#'            [reduce using rule 94 (lpe)]
    '&'            [reduce using rule 94 (lpe)]
    $default       reduce using rule 94 (lpe)

    pe   go to state 99
    lpe  go to state 152


state 100

   88 print: KW_PRINT lpe .

    $default  reduce using rule 88 (print)


state 101

   30 cmd: TK_IDENTIFIER '=' . exp
   33    | TK_IDENTIFIER '=' . '#' exp
   34    | TK_IDENTIFIER '=' . '&' exp
   38    | TK_IDENTIFIER '=' . '#' exp '[' exp ']'
   39    | TK_IDENTIFIER '=' . '&' exp '[' exp ']'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42
    '#'            shift, and go to state 153
    '&'            shift, and go to state 154

    exp  go to state 155


state 102

   40 cmd: TK_IDENTIFIER '(' . l_func_args reset ')'

    TK_IDENTIFIER  shift, and go to state 125
    LIT_INTEGER    shift, and go to state 126
    LIT_REAL       shift, and go to state 127
    LIT_CHAR       shift, and go to state 128
    '#'            shift, and go to state 129
    '&'            shift, and go to state 130

    $default  reduce using rule 76 (l_func_args)

    func_args    go to state 131
    l_func_args  go to state 156


state 103

   35 cmd: TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 157


state 104

   31 cmd: '#' TK_IDENTIFIER . '=' exp
   36    | '#' TK_IDENTIFIER . '[' exp ']' '=' exp

    '='  shift, and go to state 158
    '['  shift, and go to state 159


state 105

   32 cmd: '&' TK_IDENTIFIER . '=' exp
   37    | '&' TK_IDENTIFIER . '[' exp ']' '=' exp

    '='  shift, and go to state 160
    '['  shift, and go to state 161


state 106

   23 block: '{' lcmd '}' .

    $default  reduce using rule 23 (block)


state 107

   25 lcmd: cmd ';' . lcmd
   27     | cmd ';' . cmd lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 46
    KW_RETURN      shift, and go to state 47
    KW_PRINT       shift, and go to state 48
    TK_IDENTIFIER  shift, and go to state 49
    '#'            shift, and go to state 50
    '{'            shift, and go to state 23
    '&'            shift, and go to state 51

    $end           reduce using rule 24 (block)
    $end           [reduce using rule 26 (lcmd)]
    KW_CHAR        [reduce using rule 24 (block)]
    KW_CHAR        [reduce using rule 26 (lcmd)]
    KW_INT         [reduce using rule 24 (block)]
    KW_INT         [reduce using rule 26 (lcmd)]
    KW_FLOAT       [reduce using rule 24 (block)]
    KW_FLOAT       [reduce using rule 26 (lcmd)]
    KW_IF          [reduce using rule 24 (block)]
    KW_IF          [reduce using rule 26 (lcmd)]
    KW_ELSE        reduce using rule 24 (block)
    KW_ELSE        [reduce using rule 26 (lcmd)]
    KW_WHILE       [reduce using rule 24 (block)]
    KW_WHILE       [reduce using rule 26 (lcmd)]
    KW_FOR         [reduce using rule 24 (block)]
    KW_FOR         [reduce using rule 26 (lcmd)]
    KW_READ        [reduce using rule 24 (block)]
    KW_RETURN      [reduce using rule 24 (block)]
    KW_PRINT       [reduce using rule 24 (block)]
    TK_IDENTIFIER  [reduce using rule 24 (block)]
    '#'            [reduce using rule 24 (block)]
    '{'            [reduce using rule 24 (block)]
    '}'            reduce using rule 24 (block)
    '}'            [reduce using rule 26 (lcmd)]
    '&'            [reduce using rule 24 (block)]
    $default       reduce using rule 24 (block)

    dec          go to state 52
    block        go to state 53
    lcmd         go to state 162
    cmd          go to state 163
    func_dec     go to state 10
    func_header  go to state 11
    print        go to state 56
    read         go to state 57


state 108

   10 dec: KW_CHAR TK_IDENTIFIER '=' exp ';' .

    $default  reduce using rule 10 (dec)


state 109

   83 func_par: KW_CHAR TK_IDENTIFIER .

    $default  reduce using rule 83 (func_par)


state 110

   81 func_par: KW_INT TK_IDENTIFIER .

    $default  reduce using rule 81 (func_par)


state 111

   82 func_par: KW_FLOAT TK_IDENTIFIER .

    $default  reduce using rule 82 (func_par)


state 112

   84 l_func_par: func_par l_func_par .

    $default  reduce using rule 84 (l_func_par)


state 113

   86 reset_func_par: ',' . func_par reset_func_par

    KW_CHAR   shift, and go to state 59
    KW_INT    shift, and go to state 60
    KW_FLOAT  shift, and go to state 61

    func_par  go to state 164


state 114

   80 func_header: KW_CHAR TK_IDENTIFIER '(' l_func_par reset_func_par . ')'

    ')'  shift, and go to state 165


state 115

   16 dec: KW_CHAR TK_IDENTIFIER '[' exp ']' . ':' vet_dec ';'
   17    | KW_CHAR TK_IDENTIFIER '[' exp ']' . ';'

    ';'  shift, and go to state 166
    ':'  shift, and go to state 167


state 116

   19 dec: KW_CHAR '#' TK_IDENTIFIER '=' exp . ';'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ';'           shift, and go to state 168


state 117

   11 dec: KW_INT TK_IDENTIFIER '=' exp ';' .

    $default  reduce using rule 11 (dec)


state 118

   78 func_header: KW_INT TK_IDENTIFIER '(' l_func_par reset_func_par . ')'

    ')'  shift, and go to state 169


state 119

   12 dec: KW_INT TK_IDENTIFIER '[' exp ']' . ':' vet_dec ';'
   13    | KW_INT TK_IDENTIFIER '[' exp ']' . ';'

    ';'  shift, and go to state 170
    ':'  shift, and go to state 171


state 120

   20 dec: KW_INT '#' TK_IDENTIFIER '=' exp . ';'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ';'           shift, and go to state 172


state 121

    9 dec: KW_FLOAT TK_IDENTIFIER '=' exp ';' .

    $default  reduce using rule 9 (dec)


state 122

   79 func_header: KW_FLOAT TK_IDENTIFIER '(' l_func_par reset_func_par . ')'

    ')'  shift, and go to state 173


state 123

   14 dec: KW_FLOAT TK_IDENTIFIER '[' exp ']' . ':' vet_dec ';'
   15    | KW_FLOAT TK_IDENTIFIER '[' exp ']' . ';'

    ';'  shift, and go to state 174
    ':'  shift, and go to state 175


state 124

   18 dec: KW_FLOAT '#' TK_IDENTIFIER '=' exp . ';'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ';'           shift, and go to state 176


state 125

   72 func_args: TK_IDENTIFIER .

    $default  reduce using rule 72 (func_args)


state 126

   71 func_args: LIT_INTEGER .

    $default  reduce using rule 71 (func_args)


state 127

   69 func_args: LIT_REAL .

    $default  reduce using rule 69 (func_args)


state 128

   70 func_args: LIT_CHAR .

    $default  reduce using rule 70 (func_args)


state 129

   73 func_args: '#' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 177


state 130

   74 func_args: '&' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 178


state 131

   75 l_func_args: func_args . l_func_args

    TK_IDENTIFIER  shift, and go to state 125
    LIT_INTEGER    shift, and go to state 126
    LIT_REAL       shift, and go to state 127
    LIT_CHAR       shift, and go to state 128
    '#'            shift, and go to state 129
    '&'            shift, and go to state 130

    $default  reduce using rule 76 (l_func_args)

    func_args    go to state 131
    l_func_args  go to state 179


state 132

   67 exp: TK_IDENTIFIER '(' l_func_args . reset ')'

    ','  shift, and go to state 180

    $default  reduce using rule 22 (reset)

    reset  go to state 181


state 133

   50 exp: TK_IDENTIFIER '[' exp . ']'
   54    | exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ']'           shift, and go to state 182


state 134

   68 exp: '(' exp ')' .

    $default  reduce using rule 68 (exp)


state 135

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   61    | exp OPERATOR_LE exp .
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 61 (exp)


state 136

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   62    | exp OPERATOR_GE exp .
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 62 (exp)


state 137

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   63    | exp OPERATOR_EQ exp .
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 63 (exp)


state 138

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   64    | exp OPERATOR_NE exp .
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 64 (exp)


state 139

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   65    | exp OPERATOR_AND exp .
   66    | exp . OPERATOR_OR exp

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89

    $default  reduce using rule 65 (exp)


state 140

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp
   66    | exp OPERATOR_OR exp .

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89

    $default  reduce using rule 66 (exp)


state 141

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   58    | exp '<' exp .
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 58 (exp)


state 142

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   59    | exp '>' exp .
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 59 (exp)


state 143

   54 exp: exp . '+' exp
   54    | exp '+' exp .
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89

    $default  reduce using rule 54 (exp)


state 144

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   55    | exp '-' exp .
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89

    $default  reduce using rule 55 (exp)


state 145

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   56    | exp '*' exp .
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    '/'  shift, and go to state 89

    $default  reduce using rule 56 (exp)


state 146

   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   57    | exp '/' exp .
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    $default  reduce using rule 57 (exp)


state 147

    4 dec: KW_IF '(' exp ')' KW_THEN . lcmd
    5    | KW_IF '(' exp ')' KW_THEN . lcmd KW_ELSE lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 46
    KW_RETURN      shift, and go to state 47
    KW_PRINT       shift, and go to state 48
    TK_IDENTIFIER  shift, and go to state 49
    '#'            shift, and go to state 50
    '{'            shift, and go to state 23
    '&'            shift, and go to state 51

    KW_CHAR   [reduce using rule 26 (lcmd)]
    KW_INT    [reduce using rule 26 (lcmd)]
    KW_FLOAT  [reduce using rule 26 (lcmd)]
    KW_IF     [reduce using rule 26 (lcmd)]
    KW_WHILE  [reduce using rule 26 (lcmd)]
    KW_FOR    [reduce using rule 26 (lcmd)]
    ';'       reduce using rule 24 (block)
    $default  reduce using rule 26 (lcmd)

    dec          go to state 52
    block        go to state 53
    lcmd         go to state 183
    cmd          go to state 55
    func_dec     go to state 10
    func_header  go to state 11
    print        go to state 56
    read         go to state 57


state 148

    6 dec: KW_WHILE '(' exp ')' lcmd .

    $default  reduce using rule 6 (dec)


state 149

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp . KW_TO exp ')' lcmd
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    KW_TO         shift, and go to state 184
    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89


state 150

   92 pe: '#' TK_IDENTIFIER .

    $default  reduce using rule 92 (pe)


state 151

   91 pe: '&' TK_IDENTIFIER .

    $default  reduce using rule 91 (pe)


state 152

   93 lpe: pe lpe .

    $default  reduce using rule 93 (lpe)


state 153

   33 cmd: TK_IDENTIFIER '=' '#' . exp
   38    | TK_IDENTIFIER '=' '#' . exp '[' exp ']'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 185


state 154

   34 cmd: TK_IDENTIFIER '=' '&' . exp
   39    | TK_IDENTIFIER '=' '&' . exp '[' exp ']'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 186


state 155

   30 cmd: TK_IDENTIFIER '=' exp .
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 30 (cmd)


state 156

   40 cmd: TK_IDENTIFIER '(' l_func_args . reset ')'

    ','  shift, and go to state 180

    $default  reduce using rule 22 (reset)

    reset  go to state 187


state 157

   35 cmd: TK_IDENTIFIER '[' exp . ']' '=' exp
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ']'           shift, and go to state 188


state 158

   31 cmd: '#' TK_IDENTIFIER '=' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 189


state 159

   36 cmd: '#' TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 190


state 160

   32 cmd: '&' TK_IDENTIFIER '=' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 191


state 161

   37 cmd: '&' TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 192


state 162

   25 lcmd: cmd ';' lcmd .

    $default  reduce using rule 25 (lcmd)


state 163

   25 lcmd: cmd . ';' lcmd
   27     | cmd . ';' cmd lcmd
   27     | cmd ';' cmd . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 46
    KW_RETURN      shift, and go to state 47
    KW_PRINT       shift, and go to state 48
    TK_IDENTIFIER  shift, and go to state 49
    ';'            shift, and go to state 107
    '#'            shift, and go to state 50
    '{'            shift, and go to state 23
    '&'            shift, and go to state 51

    KW_CHAR   [reduce using rule 26 (lcmd)]
    KW_INT    [reduce using rule 26 (lcmd)]
    KW_FLOAT  [reduce using rule 26 (lcmd)]
    KW_IF     [reduce using rule 26 (lcmd)]
    KW_WHILE  [reduce using rule 26 (lcmd)]
    KW_FOR    [reduce using rule 26 (lcmd)]
    ';'       [reduce using rule 24 (block)]
    $default  reduce using rule 26 (lcmd)

    dec          go to state 52
    block        go to state 53
    lcmd         go to state 193
    cmd          go to state 55
    func_dec     go to state 10
    func_header  go to state 11
    print        go to state 56
    read         go to state 57


state 164

   86 reset_func_par: ',' func_par . reset_func_par

    ','  shift, and go to state 113

    $default  reduce using rule 87 (reset_func_par)

    reset_func_par  go to state 194


<<<<<<< Updated upstream
State 165

   80 func_header: KW_CHAR TK_IDENTIFIER '(' l_func_par reset_func_par ')' .

    $default  reduce using rule 80 (func_header)
=======
state 165

   80 func_header: KW_CHAR TK_IDENTIFIER '(' l_func_par reset_func_par ')' .
>>>>>>> Stashed changes

    $default  reduce using rule 80 (func_header)


<<<<<<< Updated upstream
   17 dec: KW_CHAR TK_IDENTIFIER '[' exp ']' ';' .

=======
state 166

   17 dec: KW_CHAR TK_IDENTIFIER '[' exp ']' ';' .

>>>>>>> Stashed changes
    $default  reduce using rule 17 (dec)


state 167

   16 dec: KW_CHAR TK_IDENTIFIER '[' exp ']' ':' . vet_dec ';'

    LIT_INTEGER  shift, and go to state 195
    LIT_REAL     shift, and go to state 196
    LIT_CHAR     shift, and go to state 197

    lit      go to state 198
    vet_dec  go to state 199


state 168

   19 dec: KW_CHAR '#' TK_IDENTIFIER '=' exp ';' .

    $default  reduce using rule 19 (dec)


<<<<<<< Updated upstream
State 169

   78 func_header: KW_INT TK_IDENTIFIER '(' l_func_par reset_func_par ')' .

    $default  reduce using rule 78 (func_header)
=======
state 169

   78 func_header: KW_INT TK_IDENTIFIER '(' l_func_par reset_func_par ')' .
>>>>>>> Stashed changes

    $default  reduce using rule 78 (func_header)


<<<<<<< Updated upstream
   13 dec: KW_INT TK_IDENTIFIER '[' exp ']' ';' .

=======
state 170

   13 dec: KW_INT TK_IDENTIFIER '[' exp ']' ';' .

>>>>>>> Stashed changes
    $default  reduce using rule 13 (dec)


state 171

   12 dec: KW_INT TK_IDENTIFIER '[' exp ']' ':' . vet_dec ';'

    LIT_INTEGER  shift, and go to state 195
    LIT_REAL     shift, and go to state 196
    LIT_CHAR     shift, and go to state 197

    lit      go to state 198
    vet_dec  go to state 200


state 172

   20 dec: KW_INT '#' TK_IDENTIFIER '=' exp ';' .

    $default  reduce using rule 20 (dec)


<<<<<<< Updated upstream
State 173

   79 func_header: KW_FLOAT TK_IDENTIFIER '(' l_func_par reset_func_par ')' .

    $default  reduce using rule 79 (func_header)
=======
state 173

   79 func_header: KW_FLOAT TK_IDENTIFIER '(' l_func_par reset_func_par ')' .
>>>>>>> Stashed changes

    $default  reduce using rule 79 (func_header)


<<<<<<< Updated upstream
=======
state 174

>>>>>>> Stashed changes
   15 dec: KW_FLOAT TK_IDENTIFIER '[' exp ']' ';' .

    $default  reduce using rule 15 (dec)


state 175

   14 dec: KW_FLOAT TK_IDENTIFIER '[' exp ']' ':' . vet_dec ';'

    LIT_INTEGER  shift, and go to state 195
    LIT_REAL     shift, and go to state 196
    LIT_CHAR     shift, and go to state 197

    lit      go to state 198
    vet_dec  go to state 201


state 176

   18 dec: KW_FLOAT '#' TK_IDENTIFIER '=' exp ';' .

    $default  reduce using rule 18 (dec)


state 177

   73 func_args: '#' TK_IDENTIFIER .

    $default  reduce using rule 73 (func_args)


state 178

   74 func_args: '&' TK_IDENTIFIER .

    $default  reduce using rule 74 (func_args)


state 179

   75 l_func_args: func_args l_func_args .

    $default  reduce using rule 75 (l_func_args)


state 180

   21 reset: ',' . func_args reset

    TK_IDENTIFIER  shift, and go to state 125
    LIT_INTEGER    shift, and go to state 126
    LIT_REAL       shift, and go to state 127
    LIT_CHAR       shift, and go to state 128
    '#'            shift, and go to state 129
    '&'            shift, and go to state 130

    func_args  go to state 202


state 181

   67 exp: TK_IDENTIFIER '(' l_func_args reset . ')'

    ')'  shift, and go to state 203


state 182

   50 exp: TK_IDENTIFIER '[' exp ']' .

    $default  reduce using rule 50 (exp)


state 183

    4 dec: KW_IF '(' exp ')' KW_THEN lcmd .
    5    | KW_IF '(' exp ')' KW_THEN lcmd . KW_ELSE lcmd

    KW_ELSE  shift, and go to state 204

    KW_ELSE   [reduce using rule 4 (dec)]
    $default  reduce using rule 4 (dec)


state 184

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO . exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 205


state 185

   33 cmd: TK_IDENTIFIER '=' '#' exp .
   38    | TK_IDENTIFIER '=' '#' exp . '[' exp ']'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    '['           shift, and go to state 206

    $default  reduce using rule 33 (cmd)


state 186

   34 cmd: TK_IDENTIFIER '=' '&' exp .
   39    | TK_IDENTIFIER '=' '&' exp . '[' exp ']'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    '['           shift, and go to state 207

    $default  reduce using rule 34 (cmd)


state 187

   40 cmd: TK_IDENTIFIER '(' l_func_args reset . ')'

    ')'  shift, and go to state 208


state 188

   35 cmd: TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 209


state 189

   31 cmd: '#' TK_IDENTIFIER '=' exp .
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 31 (cmd)


state 190

   36 cmd: '#' TK_IDENTIFIER '[' exp . ']' '=' exp
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ']'           shift, and go to state 210


state 191

   32 cmd: '&' TK_IDENTIFIER '=' exp .
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 32 (cmd)


state 192

   37 cmd: '&' TK_IDENTIFIER '[' exp . ']' '=' exp
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ']'           shift, and go to state 211


state 193

   27 lcmd: cmd ';' cmd lcmd .

    $default  reduce using rule 27 (lcmd)


<<<<<<< Updated upstream
State 194
=======
state 194
>>>>>>> Stashed changes

   86 reset_func_par: ',' func_par reset_func_par .

    $default  reduce using rule 86 (reset_func_par)


<<<<<<< Updated upstream
State 195
=======
state 195
>>>>>>> Stashed changes

   44 lit: LIT_INTEGER .

    $default  reduce using rule 44 (lit)


<<<<<<< Updated upstream
State 196
=======
state 196
>>>>>>> Stashed changes

   45 lit: LIT_REAL .

    $default  reduce using rule 45 (lit)


<<<<<<< Updated upstream
State 197
=======
state 197
>>>>>>> Stashed changes

   46 lit: LIT_CHAR .

    $default  reduce using rule 46 (lit)


<<<<<<< Updated upstream
State 198

   47 vet_dec: lit . vet_dec
   48        | lit .

    LIT_INTEGER  shift, and go to state 195
    LIT_REAL     shift, and go to state 196
    LIT_CHAR     shift, and go to state 197

    $default  reduce using rule 48 (vet_dec)

=======
state 198

   47 vet_dec: lit . vet_dec
   48        | lit .

    LIT_INTEGER  shift, and go to state 195
    LIT_REAL     shift, and go to state 196
    LIT_CHAR     shift, and go to state 197

    $default  reduce using rule 48 (vet_dec)

>>>>>>> Stashed changes
    lit      go to state 198
    vet_dec  go to state 212


<<<<<<< Updated upstream
State 199
=======
state 199
>>>>>>> Stashed changes

   16 dec: KW_CHAR TK_IDENTIFIER '[' exp ']' ':' vet_dec . ';'

    ';'  shift, and go to state 213


<<<<<<< Updated upstream
State 200
=======
state 200
>>>>>>> Stashed changes

   12 dec: KW_INT TK_IDENTIFIER '[' exp ']' ':' vet_dec . ';'

    ';'  shift, and go to state 214
<<<<<<< Updated upstream


State 201
=======


state 201
>>>>>>> Stashed changes

   14 dec: KW_FLOAT TK_IDENTIFIER '[' exp ']' ':' vet_dec . ';'

    ';'  shift, and go to state 215


<<<<<<< Updated upstream
State 202
=======
state 202
>>>>>>> Stashed changes

   21 reset: ',' func_args . reset

    ','  shift, and go to state 180

    $default  reduce using rule 22 (reset)

    reset  go to state 216


<<<<<<< Updated upstream
State 203
=======
state 203
>>>>>>> Stashed changes

   67 exp: TK_IDENTIFIER '(' l_func_args reset ')' .

    $default  reduce using rule 67 (exp)


<<<<<<< Updated upstream
State 204
=======
state 204
>>>>>>> Stashed changes

    5 dec: KW_IF '(' exp ')' KW_THEN lcmd KW_ELSE . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 46
    KW_RETURN      shift, and go to state 47
    KW_PRINT       shift, and go to state 48
    TK_IDENTIFIER  shift, and go to state 49
    '#'            shift, and go to state 50
    '{'            shift, and go to state 23
    '&'            shift, and go to state 51

    KW_CHAR   [reduce using rule 26 (lcmd)]
    KW_INT    [reduce using rule 26 (lcmd)]
    KW_FLOAT  [reduce using rule 26 (lcmd)]
    KW_IF     [reduce using rule 26 (lcmd)]
    KW_WHILE  [reduce using rule 26 (lcmd)]
    KW_FOR    [reduce using rule 26 (lcmd)]
    ';'       reduce using rule 24 (block)
    $default  reduce using rule 26 (lcmd)

    dec          go to state 52
    block        go to state 53
    lcmd         go to state 217
    cmd          go to state 55
    func_dec     go to state 10
    func_header  go to state 11
    print        go to state 56
    read         go to state 57


<<<<<<< Updated upstream
State 205
=======
state 205
>>>>>>> Stashed changes

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp . ')' lcmd
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ')'           shift, and go to state 218


<<<<<<< Updated upstream
State 206
=======
state 206
>>>>>>> Stashed changes

   38 cmd: TK_IDENTIFIER '=' '#' exp '[' . exp ']'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 219


<<<<<<< Updated upstream
State 207
=======
state 207
>>>>>>> Stashed changes

   39 cmd: TK_IDENTIFIER '=' '&' exp '[' . exp ']'

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 220


<<<<<<< Updated upstream
State 208
=======
state 208
>>>>>>> Stashed changes

   40 cmd: TK_IDENTIFIER '(' l_func_args reset ')' .

    $default  reduce using rule 40 (cmd)


<<<<<<< Updated upstream
State 209
=======
state 209
>>>>>>> Stashed changes

   35 cmd: TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 221


<<<<<<< Updated upstream
State 210
=======
state 210
>>>>>>> Stashed changes

   36 cmd: '#' TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 222


<<<<<<< Updated upstream
State 211
=======
state 211
>>>>>>> Stashed changes

   37 cmd: '&' TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 223
<<<<<<< Updated upstream


State 212
=======


state 212
>>>>>>> Stashed changes

   47 vet_dec: lit vet_dec .

    $default  reduce using rule 47 (vet_dec)


<<<<<<< Updated upstream
State 213
=======
state 213
>>>>>>> Stashed changes

   16 dec: KW_CHAR TK_IDENTIFIER '[' exp ']' ':' vet_dec ';' .

    $default  reduce using rule 16 (dec)


<<<<<<< Updated upstream
State 214
=======
state 214
>>>>>>> Stashed changes

   12 dec: KW_INT TK_IDENTIFIER '[' exp ']' ':' vet_dec ';' .

    $default  reduce using rule 12 (dec)


<<<<<<< Updated upstream
State 215
=======
state 215
>>>>>>> Stashed changes

   14 dec: KW_FLOAT TK_IDENTIFIER '[' exp ']' ':' vet_dec ';' .

    $default  reduce using rule 14 (dec)


<<<<<<< Updated upstream
State 216
=======
state 216
>>>>>>> Stashed changes

   21 reset: ',' func_args reset .

    $default  reduce using rule 21 (reset)


<<<<<<< Updated upstream
State 217
=======
state 217
>>>>>>> Stashed changes

    5 dec: KW_IF '(' exp ')' KW_THEN lcmd KW_ELSE lcmd .

    $default  reduce using rule 5 (dec)


<<<<<<< Updated upstream
State 218
=======
state 218
>>>>>>> Stashed changes

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 46
    KW_RETURN      shift, and go to state 47
    KW_PRINT       shift, and go to state 48
    TK_IDENTIFIER  shift, and go to state 49
    '#'            shift, and go to state 50
    '{'            shift, and go to state 23
    '&'            shift, and go to state 51

    KW_CHAR   [reduce using rule 26 (lcmd)]
    KW_INT    [reduce using rule 26 (lcmd)]
    KW_FLOAT  [reduce using rule 26 (lcmd)]
    KW_IF     [reduce using rule 26 (lcmd)]
    KW_WHILE  [reduce using rule 26 (lcmd)]
    KW_FOR    [reduce using rule 26 (lcmd)]
    ';'       reduce using rule 24 (block)
    $default  reduce using rule 26 (lcmd)

    dec          go to state 52
    block        go to state 53
    lcmd         go to state 224
    cmd          go to state 55
    func_dec     go to state 10
    func_header  go to state 11
    print        go to state 56
    read         go to state 57


<<<<<<< Updated upstream
State 219
=======
state 219
>>>>>>> Stashed changes

   38 cmd: TK_IDENTIFIER '=' '#' exp '[' exp . ']'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ']'           shift, and go to state 225


<<<<<<< Updated upstream
State 220
=======
state 220
>>>>>>> Stashed changes

   39 cmd: TK_IDENTIFIER '=' '&' exp '[' exp . ']'
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89
    ']'           shift, and go to state 226


<<<<<<< Updated upstream
State 221
=======
state 221
>>>>>>> Stashed changes

   35 cmd: TK_IDENTIFIER '[' exp ']' '=' exp .
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 35 (cmd)


<<<<<<< Updated upstream
State 222
=======
state 222
>>>>>>> Stashed changes

   36 cmd: '#' TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 227


<<<<<<< Updated upstream
State 223
=======
state 223
>>>>>>> Stashed changes

   37 cmd: '&' TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 37
    LIT_INTEGER    shift, and go to state 38
    LIT_REAL       shift, and go to state 39
    LIT_CHAR       shift, and go to state 40
    '!'            shift, and go to state 41
    '('            shift, and go to state 42

    exp  go to state 228


<<<<<<< Updated upstream
State 224
=======
state 224
>>>>>>> Stashed changes

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd .

    $default  reduce using rule 7 (dec)


<<<<<<< Updated upstream
State 225
=======
state 225
>>>>>>> Stashed changes

   38 cmd: TK_IDENTIFIER '=' '#' exp '[' exp ']' .

    $default  reduce using rule 38 (cmd)


<<<<<<< Updated upstream
State 226
=======
state 226
>>>>>>> Stashed changes

   39 cmd: TK_IDENTIFIER '=' '&' exp '[' exp ']' .

    $default  reduce using rule 39 (cmd)


<<<<<<< Updated upstream
State 227
=======
state 227
>>>>>>> Stashed changes

   36 cmd: '#' TK_IDENTIFIER '[' exp ']' '=' exp .
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 36 (cmd)


<<<<<<< Updated upstream
State 228
=======
state 228
>>>>>>> Stashed changes

   37 cmd: '&' TK_IDENTIFIER '[' exp ']' '=' exp .
   54 exp: exp . '+' exp
   55    | exp . '-' exp
   56    | exp . '*' exp
   57    | exp . '/' exp
   58    | exp . '<' exp
   59    | exp . '>' exp
   61    | exp . OPERATOR_LE exp
   62    | exp . OPERATOR_GE exp
   63    | exp . OPERATOR_EQ exp
   64    | exp . OPERATOR_NE exp
   65    | exp . OPERATOR_AND exp
   66    | exp . OPERATOR_OR exp

    OPERATOR_LE   shift, and go to state 78
    OPERATOR_GE   shift, and go to state 79
    OPERATOR_EQ   shift, and go to state 80
    OPERATOR_NE   shift, and go to state 81
    OPERATOR_AND  shift, and go to state 82
    OPERATOR_OR   shift, and go to state 83
    '<'           shift, and go to state 84
    '>'           shift, and go to state 85
    '+'           shift, and go to state 86
    '-'           shift, and go to state 87
    '*'           shift, and go to state 88
    '/'           shift, and go to state 89

    $default  reduce using rule 37 (cmd)
