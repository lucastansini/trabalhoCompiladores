Terminals unused in grammar

   TOKEN_ERROR


Rules useless in parser due to conflicts

   36 cmd: %empty


State 20 conflicts: 1 reduce/reduce
State 37 conflicts: 3 shift/reduce
State 48 conflicts: 1 shift/reduce
State 65 conflicts: 6 shift/reduce, 1 reduce/reduce
State 79 conflicts: 3 shift/reduce
State 87 conflicts: 13 shift/reduce, 17 reduce/reduce
State 96 conflicts: 6 shift/reduce, 1 reduce/reduce
State 97 conflicts: 13 shift/reduce
State 120 conflicts: 7 shift/reduce, 1 reduce/reduce
State 127 conflicts: 1 shift/reduce
State 145 conflicts: 6 shift/reduce, 1 reduce/reduce
State 156 conflicts: 6 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: ldec

    2 ldec: dec ldec
    3     | %empty

    4 dec: KW_IF '(' exp ')' KW_THEN lcmd
    5    | KW_IF '(' exp ')' KW_THEN lcmd KW_ELSE lcmd
    6    | KW_WHILE '(' exp ')' lcmd
    7    | KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd
    8    | func_dec
    9    | type TK_IDENTIFIER '=' lit ';'
   10    | type TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   11    | type TK_IDENTIFIER '[' exp ']' ';'
   12    | type '#' TK_IDENTIFIER '=' lit ';'

   13 reset: ',' func_args reset
   14      | %empty

   15 block: '{' lcmd '}'
   16      | %empty

   17 lcmd: cmd ';' lcmd
   18     | %empty
   19     | cmd ';' cmd lcmd
   20     | dec

   21 cmd: block
   22    | TK_IDENTIFIER '=' exp
   23    | '#' TK_IDENTIFIER '=' exp
   24    | '&' TK_IDENTIFIER '=' exp
   25    | TK_IDENTIFIER '=' '#' exp
   26    | TK_IDENTIFIER '=' '&' exp
   27    | TK_IDENTIFIER '[' exp ']' '=' exp
   28    | '#' TK_IDENTIFIER '[' exp ']' '=' exp
   29    | '&' TK_IDENTIFIER '[' exp ']' '=' exp
   30    | TK_IDENTIFIER '=' '[' exp ']' '#' exp
   31    | TK_IDENTIFIER '=' '[' exp ']' '&' exp
   32    | func_call
   33    | print
   34    | read
   35    | KW_RETURN exp
   36    | %empty

   37 type: KW_INT
   38     | KW_FLOAT
   39     | KW_CHAR

   40 lit: LIT_REAL
   41    | LIT_CHAR
   42    | LIT_INTEGER

   43 vet_dec: lit vet_dec
   44        | lit

   45 exp: TK_IDENTIFIER
   46    | TK_IDENTIFIER '[' exp ']'
   47    | lit
   48    | exp op exp
   49    | TK_IDENTIFIER '(' ')'
   50    | func_call

   51 func_call: TK_IDENTIFIER '(' l_func_args reset ')'

   52 func_args: lit
   53          | TK_IDENTIFIER
   54          | '#' TK_IDENTIFIER
   55          | '&' TK_IDENTIFIER

   56 l_func_args: func_args l_func_args
   57            | %empty

   58 func_dec: func_header block

   59 func_header: type TK_IDENTIFIER '(' l_func_par reset_func_par ')'

   60 func_par: type TK_IDENTIFIER

   61 l_func_par: func_par l_func_par
   62           | %empty

   63 reset_func_par: ',' func_par reset_func_par
   64               | %empty

   65 op: '+'
   66   | '-'
   67   | '*'
   68   | '/'
   69   | '<'
   70   | '>'
   71   | '!'
   72   | OPERATOR_LE
   73   | OPERATOR_GE
   74   | OPERATOR_EQ
   75   | OPERATOR_NE
   76   | OPERATOR_AND
   77   | OPERATOR_OR

   78 print: KW_PRINT lpe

   79 pe: LIT_STRING
   80   | TK_IDENTIFIER
   81   | '&' TK_IDENTIFIER
   82   | '#' TK_IDENTIFIER

   83 lpe: pe lpe
   84    | %empty

   85 read: KW_READ TK_IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 71
'#' (35) 12 23 25 28 30 54 82
'&' (38) 24 26 29 31 55 81
'(' (40) 4 5 6 7 49 51 59
')' (41) 4 5 6 7 49 51 59
'*' (42) 67
'+' (43) 65
',' (44) 13 63
'-' (45) 66
'/' (47) 68
':' (58) 10
';' (59) 9 10 11 12 17 19
'<' (60) 69
'=' (61) 7 9 12 22 23 24 25 26 27 28 29 30 31
'>' (62) 70
'[' (91) 10 11 27 28 29 30 31 46
']' (93) 10 11 27 28 29 30 31 46
'{' (123) 15
'}' (125) 15
error (256)
KW_CHAR (258) 39
KW_INT (259) 37
KW_FLOAT (260) 38
KW_IF (261) 4 5
KW_THEN (262) 4 5
KW_ELSE (263) 5
KW_WHILE (264) 6
KW_FOR (265) 7
KW_READ (266) 85
KW_RETURN (267) 35
KW_PRINT (268) 78
KW_TO (269) 7
OPERATOR_LE (270) 72
OPERATOR_GE (271) 73
OPERATOR_EQ (272) 74
OPERATOR_NE (273) 75
OPERATOR_AND (274) 76
OPERATOR_OR (275) 77
TK_IDENTIFIER (276) 7 9 10 11 12 22 23 24 25 26 27 28 29 30 31 45 46
    49 51 53 54 55 59 60 80 81 82 85
LIT_INTEGER (277) 42
LIT_REAL (278) 40
LIT_CHAR (279) 41
LIT_STRING (280) 79
TOKEN_ERROR (281)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
ldec (48)
    on left: 2 3, on right: 1 2
dec (49)
    on left: 4 5 6 7 8 9 10 11 12, on right: 2 20
reset (50)
    on left: 13 14, on right: 13 51
block (51)
    on left: 15 16, on right: 21 58
lcmd (52)
    on left: 17 18 19 20, on right: 4 5 6 7 15 17 19
cmd (53)
    on left: 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36, on right:
    17 19
type (54)
    on left: 37 38 39, on right: 9 10 11 12 59 60
lit (55)
    on left: 40 41 42, on right: 9 12 43 44 47 52
vet_dec (56)
    on left: 43 44, on right: 10 43
exp (57)
    on left: 45 46 47 48 49 50, on right: 4 5 6 7 10 11 22 23 24 25
    26 27 28 29 30 31 35 46 48
func_call (58)
    on left: 51, on right: 32 50
func_args (59)
    on left: 52 53 54 55, on right: 13 56
l_func_args (60)
    on left: 56 57, on right: 51 56
func_dec (61)
    on left: 58, on right: 8
func_header (62)
    on left: 59, on right: 58
func_par (63)
    on left: 60, on right: 61 63
l_func_par (64)
    on left: 61 62, on right: 59 61
reset_func_par (65)
    on left: 63 64, on right: 59 63
op (66)
    on left: 65 66 67 68 69 70 71 72 73 74 75 76 77, on right: 48
print (67)
    on left: 78, on right: 33
pe (68)
    on left: 79 80 81 82, on right: 83
lpe (69)
    on left: 83 84, on right: 78 83
read (70)
    on left: 85, on right: 34


State 0

    0 $accept: . program $end

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3
    KW_IF     shift, and go to state 4
    KW_WHILE  shift, and go to state 5
    KW_FOR    shift, and go to state 6

    $default  reduce using rule 3 (ldec)

    program      go to state 7
    ldec         go to state 8
    dec          go to state 9
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12


State 1

   39 type: KW_CHAR .

    $default  reduce using rule 39 (type)


State 2

   37 type: KW_INT .

    $default  reduce using rule 37 (type)


State 3

   38 type: KW_FLOAT .

    $default  reduce using rule 38 (type)


State 4

    4 dec: KW_IF . '(' exp ')' KW_THEN lcmd
    5    | KW_IF . '(' exp ')' KW_THEN lcmd KW_ELSE lcmd

    '('  shift, and go to state 13


State 5

    6 dec: KW_WHILE . '(' exp ')' lcmd

    '('  shift, and go to state 14


State 6

    7 dec: KW_FOR . '(' TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd

    '('  shift, and go to state 15


State 7

    0 $accept: program . $end

    $end  shift, and go to state 16


State 8

    1 program: ldec .

    $default  reduce using rule 1 (program)


State 9

    2 ldec: dec . ldec

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3
    KW_IF     shift, and go to state 4
    KW_WHILE  shift, and go to state 5
    KW_FOR    shift, and go to state 6

    $default  reduce using rule 3 (ldec)

    ldec         go to state 17
    dec          go to state 9
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12


State 10

    9 dec: type . TK_IDENTIFIER '=' lit ';'
   10    | type . TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   11    | type . TK_IDENTIFIER '[' exp ']' ';'
   12    | type . '#' TK_IDENTIFIER '=' lit ';'
   59 func_header: type . TK_IDENTIFIER '(' l_func_par reset_func_par ')'

    TK_IDENTIFIER  shift, and go to state 18
    '#'            shift, and go to state 19


State 11

    8 dec: func_dec .

    $default  reduce using rule 8 (dec)


State 12

   58 func_dec: func_header . block

    '{'  shift, and go to state 20

    $default  reduce using rule 16 (block)

    block  go to state 21


State 13

    4 dec: KW_IF '(' . exp ')' KW_THEN lcmd
    5    | KW_IF '(' . exp ')' KW_THEN lcmd KW_ELSE lcmd

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 27
    func_call  go to state 28


State 14

    6 dec: KW_WHILE '(' . exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 29
    func_call  go to state 28


State 15

    7 dec: KW_FOR '(' . TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 30


State 16

    0 $accept: program $end .

    $default  accept


State 17

    2 ldec: dec ldec .

    $default  reduce using rule 2 (ldec)


State 18

    9 dec: type TK_IDENTIFIER . '=' lit ';'
   10    | type TK_IDENTIFIER . '[' exp ']' ':' vet_dec ';'
   11    | type TK_IDENTIFIER . '[' exp ']' ';'
   59 func_header: type TK_IDENTIFIER . '(' l_func_par reset_func_par ')'

    '='  shift, and go to state 31
    '('  shift, and go to state 32
    '['  shift, and go to state 33


State 19

   12 dec: type '#' . TK_IDENTIFIER '=' lit ';'

    TK_IDENTIFIER  shift, and go to state 34


State 20

   15 block: '{' . lcmd '}'

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_PRINT       shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '#'            shift, and go to state 39
    '{'            shift, and go to state 20
    '&'            shift, and go to state 40

    ';'       reduce using rule 16 (block)
    ';'       [reduce using rule 36 (cmd)]
    '}'       reduce using rule 18 (lcmd)
    $default  reduce using rule 16 (block)

    dec          go to state 41
    block        go to state 42
    lcmd         go to state 43
    cmd          go to state 44
    type         go to state 10
    func_call    go to state 45
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 46
    read         go to state 47


State 21

   58 func_dec: func_header block .

    $default  reduce using rule 58 (func_dec)


State 22

   45 exp: TK_IDENTIFIER .
   46    | TK_IDENTIFIER . '[' exp ']'
   49    | TK_IDENTIFIER . '(' ')'
   51 func_call: TK_IDENTIFIER . '(' l_func_args reset ')'

    '('  shift, and go to state 48
    '['  shift, and go to state 49

    $default  reduce using rule 45 (exp)


State 23

   42 lit: LIT_INTEGER .

    $default  reduce using rule 42 (lit)


State 24

   40 lit: LIT_REAL .

    $default  reduce using rule 40 (lit)


State 25

   41 lit: LIT_CHAR .

    $default  reduce using rule 41 (lit)


State 26

   47 exp: lit .

    $default  reduce using rule 47 (exp)


State 27

    4 dec: KW_IF '(' exp . ')' KW_THEN lcmd
    5    | KW_IF '(' exp . ')' KW_THEN lcmd KW_ELSE lcmd
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    ')'           shift, and go to state 60
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 28

   50 exp: func_call .

    $default  reduce using rule 50 (exp)


State 29

    6 dec: KW_WHILE '(' exp . ')' lcmd
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    ')'           shift, and go to state 65
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 30

    7 dec: KW_FOR '(' TK_IDENTIFIER . '=' exp KW_TO exp ')' lcmd

    '='  shift, and go to state 66


State 31

    9 dec: type TK_IDENTIFIER '=' . lit ';'

    LIT_INTEGER  shift, and go to state 23
    LIT_REAL     shift, and go to state 24
    LIT_CHAR     shift, and go to state 25

    lit  go to state 67


State 32

   59 func_header: type TK_IDENTIFIER '(' . l_func_par reset_func_par ')'

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 62 (l_func_par)

    type        go to state 68
    func_par    go to state 69
    l_func_par  go to state 70


State 33

   10 dec: type TK_IDENTIFIER '[' . exp ']' ':' vet_dec ';'
   11    | type TK_IDENTIFIER '[' . exp ']' ';'

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 71
    func_call  go to state 28


State 34

   12 dec: type '#' TK_IDENTIFIER . '=' lit ';'

    '='  shift, and go to state 72


State 35

   85 read: KW_READ . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 73


State 36

   35 cmd: KW_RETURN . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 74
    func_call  go to state 28


State 37

   78 print: KW_PRINT . lpe

    TK_IDENTIFIER  shift, and go to state 75
    LIT_STRING     shift, and go to state 76
    '#'            shift, and go to state 77
    '&'            shift, and go to state 78

    TK_IDENTIFIER  [reduce using rule 84 (lpe)]
    '#'            [reduce using rule 84 (lpe)]
    '&'            [reduce using rule 84 (lpe)]
    $default       reduce using rule 84 (lpe)

    pe   go to state 79
    lpe  go to state 80


State 38

   22 cmd: TK_IDENTIFIER . '=' exp
   25    | TK_IDENTIFIER . '=' '#' exp
   26    | TK_IDENTIFIER . '=' '&' exp
   27    | TK_IDENTIFIER . '[' exp ']' '=' exp
   30    | TK_IDENTIFIER . '=' '[' exp ']' '#' exp
   31    | TK_IDENTIFIER . '=' '[' exp ']' '&' exp
   51 func_call: TK_IDENTIFIER . '(' l_func_args reset ')'

    '='  shift, and go to state 81
    '('  shift, and go to state 82
    '['  shift, and go to state 83


State 39

   23 cmd: '#' . TK_IDENTIFIER '=' exp
   28    | '#' . TK_IDENTIFIER '[' exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 84


State 40

   24 cmd: '&' . TK_IDENTIFIER '=' exp
   29    | '&' . TK_IDENTIFIER '[' exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 85


State 41

   20 lcmd: dec .

    $default  reduce using rule 20 (lcmd)


State 42

   21 cmd: block .

    $default  reduce using rule 21 (cmd)


State 43

   15 block: '{' lcmd . '}'

    '}'  shift, and go to state 86


State 44

   17 lcmd: cmd . ';' lcmd
   19     | cmd . ';' cmd lcmd

    ';'  shift, and go to state 87


State 45

   32 cmd: func_call .

    $default  reduce using rule 32 (cmd)


State 46

   33 cmd: print .

    $default  reduce using rule 33 (cmd)


State 47

   34 cmd: read .

    $default  reduce using rule 34 (cmd)


State 48

   49 exp: TK_IDENTIFIER '(' . ')'
   51 func_call: TK_IDENTIFIER '(' . l_func_args reset ')'

    TK_IDENTIFIER  shift, and go to state 88
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    ')'            shift, and go to state 89
    '#'            shift, and go to state 90
    '&'            shift, and go to state 91

    ')'       [reduce using rule 57 (l_func_args)]
    $default  reduce using rule 57 (l_func_args)

    lit          go to state 92
    func_args    go to state 93
    l_func_args  go to state 94


State 49

   46 exp: TK_IDENTIFIER '[' . exp ']'

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 95
    func_call  go to state 28


State 50

   72 op: OPERATOR_LE .

    $default  reduce using rule 72 (op)


State 51

   73 op: OPERATOR_GE .

    $default  reduce using rule 73 (op)


State 52

   74 op: OPERATOR_EQ .

    $default  reduce using rule 74 (op)


State 53

   75 op: OPERATOR_NE .

    $default  reduce using rule 75 (op)


State 54

   76 op: OPERATOR_AND .

    $default  reduce using rule 76 (op)


State 55

   77 op: OPERATOR_OR .

    $default  reduce using rule 77 (op)


State 56

   65 op: '+' .

    $default  reduce using rule 65 (op)


State 57

   66 op: '-' .

    $default  reduce using rule 66 (op)


State 58

   67 op: '*' .

    $default  reduce using rule 67 (op)


State 59

   68 op: '/' .

    $default  reduce using rule 68 (op)


State 60

    4 dec: KW_IF '(' exp ')' . KW_THEN lcmd
    5    | KW_IF '(' exp ')' . KW_THEN lcmd KW_ELSE lcmd

    KW_THEN  shift, and go to state 96


State 61

   69 op: '<' .

    $default  reduce using rule 69 (op)


State 62

   70 op: '>' .

    $default  reduce using rule 70 (op)


State 63

   71 op: '!' .

    $default  reduce using rule 71 (op)


State 64

   48 exp: exp op . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 97
    func_call  go to state 28


State 65

    6 dec: KW_WHILE '(' exp ')' . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_PRINT       shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '#'            shift, and go to state 39
    '{'            shift, and go to state 20
    '&'            shift, and go to state 40

    KW_CHAR   [reduce using rule 18 (lcmd)]
    KW_INT    [reduce using rule 18 (lcmd)]
    KW_FLOAT  [reduce using rule 18 (lcmd)]
    KW_IF     [reduce using rule 18 (lcmd)]
    KW_WHILE  [reduce using rule 18 (lcmd)]
    KW_FOR    [reduce using rule 18 (lcmd)]
    ';'       reduce using rule 16 (block)
    ';'       [reduce using rule 36 (cmd)]
    $default  reduce using rule 18 (lcmd)

    dec          go to state 41
    block        go to state 42
    lcmd         go to state 98
    cmd          go to state 44
    type         go to state 10
    func_call    go to state 45
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 46
    read         go to state 47


State 66

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' . exp KW_TO exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 99
    func_call  go to state 28


State 67

    9 dec: type TK_IDENTIFIER '=' lit . ';'

    ';'  shift, and go to state 100


State 68

   60 func_par: type . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 101


State 69

   61 l_func_par: func_par . l_func_par

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 62 (l_func_par)

    type        go to state 68
    func_par    go to state 69
    l_func_par  go to state 102


State 70

   59 func_header: type TK_IDENTIFIER '(' l_func_par . reset_func_par ')'

    ','  shift, and go to state 103

    $default  reduce using rule 64 (reset_func_par)

    reset_func_par  go to state 104


State 71

   10 dec: type TK_IDENTIFIER '[' exp . ']' ':' vet_dec ';'
   11    | type TK_IDENTIFIER '[' exp . ']' ';'
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    ']'           shift, and go to state 105
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 72

   12 dec: type '#' TK_IDENTIFIER '=' . lit ';'

    LIT_INTEGER  shift, and go to state 23
    LIT_REAL     shift, and go to state 24
    LIT_CHAR     shift, and go to state 25

    lit  go to state 106


State 73

   85 read: KW_READ TK_IDENTIFIER .

    $default  reduce using rule 85 (read)


State 74

   35 cmd: KW_RETURN exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 35 (cmd)

    op  go to state 64


State 75

   80 pe: TK_IDENTIFIER .

    $default  reduce using rule 80 (pe)


State 76

   79 pe: LIT_STRING .

    $default  reduce using rule 79 (pe)


State 77

   82 pe: '#' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 107


State 78

   81 pe: '&' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 108


State 79

   83 lpe: pe . lpe

    TK_IDENTIFIER  shift, and go to state 75
    LIT_STRING     shift, and go to state 76
    '#'            shift, and go to state 77
    '&'            shift, and go to state 78

    TK_IDENTIFIER  [reduce using rule 84 (lpe)]
    '#'            [reduce using rule 84 (lpe)]
    '&'            [reduce using rule 84 (lpe)]
    $default       reduce using rule 84 (lpe)

    pe   go to state 79
    lpe  go to state 109


State 80

   78 print: KW_PRINT lpe .

    $default  reduce using rule 78 (print)


State 81

   22 cmd: TK_IDENTIFIER '=' . exp
   25    | TK_IDENTIFIER '=' . '#' exp
   26    | TK_IDENTIFIER '=' . '&' exp
   30    | TK_IDENTIFIER '=' . '[' exp ']' '#' exp
   31    | TK_IDENTIFIER '=' . '[' exp ']' '&' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '['            shift, and go to state 110
    '#'            shift, and go to state 111
    '&'            shift, and go to state 112

    lit        go to state 26
    exp        go to state 113
    func_call  go to state 28


State 82

   51 func_call: TK_IDENTIFIER '(' . l_func_args reset ')'

    TK_IDENTIFIER  shift, and go to state 88
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '#'            shift, and go to state 90
    '&'            shift, and go to state 91

    $default  reduce using rule 57 (l_func_args)

    lit          go to state 92
    func_args    go to state 93
    l_func_args  go to state 94


State 83

   27 cmd: TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 114
    func_call  go to state 28


State 84

   23 cmd: '#' TK_IDENTIFIER . '=' exp
   28    | '#' TK_IDENTIFIER . '[' exp ']' '=' exp

    '='  shift, and go to state 115
    '['  shift, and go to state 116


State 85

   24 cmd: '&' TK_IDENTIFIER . '=' exp
   29    | '&' TK_IDENTIFIER . '[' exp ']' '=' exp

    '='  shift, and go to state 117
    '['  shift, and go to state 118


State 86

   15 block: '{' lcmd '}' .

    $default  reduce using rule 15 (block)


State 87

   17 lcmd: cmd ';' . lcmd
   19     | cmd ';' . cmd lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_PRINT       shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '#'            shift, and go to state 39
    '{'            shift, and go to state 20
    '&'            shift, and go to state 40

    $end           reduce using rule 16 (block)
    $end           [reduce using rule 18 (lcmd)]
    $end           [reduce using rule 36 (cmd)]
    KW_CHAR        [reduce using rule 16 (block)]
    KW_CHAR        [reduce using rule 18 (lcmd)]
    KW_CHAR        [reduce using rule 36 (cmd)]
    KW_INT         [reduce using rule 16 (block)]
    KW_INT         [reduce using rule 18 (lcmd)]
    KW_INT         [reduce using rule 36 (cmd)]
    KW_FLOAT       [reduce using rule 16 (block)]
    KW_FLOAT       [reduce using rule 18 (lcmd)]
    KW_FLOAT       [reduce using rule 36 (cmd)]
    KW_IF          [reduce using rule 16 (block)]
    KW_IF          [reduce using rule 18 (lcmd)]
    KW_IF          [reduce using rule 36 (cmd)]
    KW_ELSE        reduce using rule 16 (block)
    KW_ELSE        [reduce using rule 18 (lcmd)]
    KW_ELSE        [reduce using rule 36 (cmd)]
    KW_WHILE       [reduce using rule 16 (block)]
    KW_WHILE       [reduce using rule 18 (lcmd)]
    KW_WHILE       [reduce using rule 36 (cmd)]
    KW_FOR         [reduce using rule 16 (block)]
    KW_FOR         [reduce using rule 18 (lcmd)]
    KW_FOR         [reduce using rule 36 (cmd)]
    KW_READ        [reduce using rule 16 (block)]
    KW_READ        [reduce using rule 36 (cmd)]
    KW_RETURN      [reduce using rule 16 (block)]
    KW_RETURN      [reduce using rule 36 (cmd)]
    KW_PRINT       [reduce using rule 16 (block)]
    KW_PRINT       [reduce using rule 36 (cmd)]
    TK_IDENTIFIER  [reduce using rule 16 (block)]
    TK_IDENTIFIER  [reduce using rule 36 (cmd)]
    ';'            reduce using rule 16 (block)
    ';'            [reduce using rule 36 (cmd)]
    '#'            [reduce using rule 16 (block)]
    '#'            [reduce using rule 36 (cmd)]
    '{'            [reduce using rule 16 (block)]
    '{'            [reduce using rule 36 (cmd)]
    '}'            reduce using rule 16 (block)
    '}'            [reduce using rule 18 (lcmd)]
    '}'            [reduce using rule 36 (cmd)]
    '&'            [reduce using rule 16 (block)]
    '&'            [reduce using rule 36 (cmd)]
    $default       reduce using rule 16 (block)

    dec          go to state 41
    block        go to state 42
    lcmd         go to state 119
    cmd          go to state 120
    type         go to state 10
    func_call    go to state 45
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 46
    read         go to state 47


State 88

   53 func_args: TK_IDENTIFIER .

    $default  reduce using rule 53 (func_args)


State 89

   49 exp: TK_IDENTIFIER '(' ')' .

    $default  reduce using rule 49 (exp)


State 90

   54 func_args: '#' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 121


State 91

   55 func_args: '&' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 122


State 92

   52 func_args: lit .

    $default  reduce using rule 52 (func_args)


State 93

   56 l_func_args: func_args . l_func_args

    TK_IDENTIFIER  shift, and go to state 88
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '#'            shift, and go to state 90
    '&'            shift, and go to state 91

    $default  reduce using rule 57 (l_func_args)

    lit          go to state 92
    func_args    go to state 93
    l_func_args  go to state 123


State 94

   51 func_call: TK_IDENTIFIER '(' l_func_args . reset ')'

    ','  shift, and go to state 124

    $default  reduce using rule 14 (reset)

    reset  go to state 125


State 95

   46 exp: TK_IDENTIFIER '[' exp . ']'
   48    | exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    ']'           shift, and go to state 126
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 96

    4 dec: KW_IF '(' exp ')' KW_THEN . lcmd
    5    | KW_IF '(' exp ')' KW_THEN . lcmd KW_ELSE lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_PRINT       shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '#'            shift, and go to state 39
    '{'            shift, and go to state 20
    '&'            shift, and go to state 40

    KW_CHAR   [reduce using rule 18 (lcmd)]
    KW_INT    [reduce using rule 18 (lcmd)]
    KW_FLOAT  [reduce using rule 18 (lcmd)]
    KW_IF     [reduce using rule 18 (lcmd)]
    KW_WHILE  [reduce using rule 18 (lcmd)]
    KW_FOR    [reduce using rule 18 (lcmd)]
    ';'       reduce using rule 16 (block)
    ';'       [reduce using rule 36 (cmd)]
    $default  reduce using rule 18 (lcmd)

    dec          go to state 41
    block        go to state 42
    lcmd         go to state 127
    cmd          go to state 44
    type         go to state 10
    func_call    go to state 45
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 46
    read         go to state 47


State 97

   48 exp: exp . op exp
   48    | exp op exp .

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    OPERATOR_LE   [reduce using rule 48 (exp)]
    OPERATOR_GE   [reduce using rule 48 (exp)]
    OPERATOR_EQ   [reduce using rule 48 (exp)]
    OPERATOR_NE   [reduce using rule 48 (exp)]
    OPERATOR_AND  [reduce using rule 48 (exp)]
    OPERATOR_OR   [reduce using rule 48 (exp)]
    '+'           [reduce using rule 48 (exp)]
    '-'           [reduce using rule 48 (exp)]
    '*'           [reduce using rule 48 (exp)]
    '/'           [reduce using rule 48 (exp)]
    '<'           [reduce using rule 48 (exp)]
    '>'           [reduce using rule 48 (exp)]
    '!'           [reduce using rule 48 (exp)]
    $default      reduce using rule 48 (exp)

    op  go to state 64


State 98

    6 dec: KW_WHILE '(' exp ')' lcmd .

    $default  reduce using rule 6 (dec)


State 99

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp . KW_TO exp ')' lcmd
   48 exp: exp . op exp

    KW_TO         shift, and go to state 128
    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 100

    9 dec: type TK_IDENTIFIER '=' lit ';' .

    $default  reduce using rule 9 (dec)


State 101

   60 func_par: type TK_IDENTIFIER .

    $default  reduce using rule 60 (func_par)


State 102

   61 l_func_par: func_par l_func_par .

    $default  reduce using rule 61 (l_func_par)


State 103

   63 reset_func_par: ',' . func_par reset_func_par

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    type      go to state 68
    func_par  go to state 129


State 104

   59 func_header: type TK_IDENTIFIER '(' l_func_par reset_func_par . ')'

    ')'  shift, and go to state 130


State 105

   10 dec: type TK_IDENTIFIER '[' exp ']' . ':' vet_dec ';'
   11    | type TK_IDENTIFIER '[' exp ']' . ';'

    ';'  shift, and go to state 131
    ':'  shift, and go to state 132


State 106

   12 dec: type '#' TK_IDENTIFIER '=' lit . ';'

    ';'  shift, and go to state 133


State 107

   82 pe: '#' TK_IDENTIFIER .

    $default  reduce using rule 82 (pe)


State 108

   81 pe: '&' TK_IDENTIFIER .

    $default  reduce using rule 81 (pe)


State 109

   83 lpe: pe lpe .

    $default  reduce using rule 83 (lpe)


State 110

   30 cmd: TK_IDENTIFIER '=' '[' . exp ']' '#' exp
   31    | TK_IDENTIFIER '=' '[' . exp ']' '&' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 134
    func_call  go to state 28


State 111

   25 cmd: TK_IDENTIFIER '=' '#' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 135
    func_call  go to state 28


State 112

   26 cmd: TK_IDENTIFIER '=' '&' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 136
    func_call  go to state 28


State 113

   22 cmd: TK_IDENTIFIER '=' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 22 (cmd)

    op  go to state 64


State 114

   27 cmd: TK_IDENTIFIER '[' exp . ']' '=' exp
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    ']'           shift, and go to state 137
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 115

   23 cmd: '#' TK_IDENTIFIER '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 138
    func_call  go to state 28


State 116

   28 cmd: '#' TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 139
    func_call  go to state 28


State 117

   24 cmd: '&' TK_IDENTIFIER '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 140
    func_call  go to state 28


State 118

   29 cmd: '&' TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 141
    func_call  go to state 28


State 119

   17 lcmd: cmd ';' lcmd .

    $default  reduce using rule 17 (lcmd)


State 120

   17 lcmd: cmd . ';' lcmd
   19     | cmd . ';' cmd lcmd
   19     | cmd ';' cmd . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_PRINT       shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    ';'            shift, and go to state 87
    '#'            shift, and go to state 39
    '{'            shift, and go to state 20
    '&'            shift, and go to state 40

    KW_CHAR   [reduce using rule 18 (lcmd)]
    KW_INT    [reduce using rule 18 (lcmd)]
    KW_FLOAT  [reduce using rule 18 (lcmd)]
    KW_IF     [reduce using rule 18 (lcmd)]
    KW_WHILE  [reduce using rule 18 (lcmd)]
    KW_FOR    [reduce using rule 18 (lcmd)]
    ';'       [reduce using rule 16 (block)]
    ';'       [reduce using rule 36 (cmd)]
    $default  reduce using rule 18 (lcmd)

    dec          go to state 41
    block        go to state 42
    lcmd         go to state 142
    cmd          go to state 44
    type         go to state 10
    func_call    go to state 45
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 46
    read         go to state 47


State 121

   54 func_args: '#' TK_IDENTIFIER .

    $default  reduce using rule 54 (func_args)


State 122

   55 func_args: '&' TK_IDENTIFIER .

    $default  reduce using rule 55 (func_args)


State 123

   56 l_func_args: func_args l_func_args .

    $default  reduce using rule 56 (l_func_args)


State 124

   13 reset: ',' . func_args reset

    TK_IDENTIFIER  shift, and go to state 88
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '#'            shift, and go to state 90
    '&'            shift, and go to state 91

    lit        go to state 92
    func_args  go to state 143


State 125

   51 func_call: TK_IDENTIFIER '(' l_func_args reset . ')'

    ')'  shift, and go to state 144


State 126

   46 exp: TK_IDENTIFIER '[' exp ']' .

    $default  reduce using rule 46 (exp)


State 127

    4 dec: KW_IF '(' exp ')' KW_THEN lcmd .
    5    | KW_IF '(' exp ')' KW_THEN lcmd . KW_ELSE lcmd

    KW_ELSE  shift, and go to state 145

    KW_ELSE   [reduce using rule 4 (dec)]
    $default  reduce using rule 4 (dec)


State 128

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO . exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 146
    func_call  go to state 28


State 129

   63 reset_func_par: ',' func_par . reset_func_par

    ','  shift, and go to state 103

    $default  reduce using rule 64 (reset_func_par)

    reset_func_par  go to state 147


State 130

   59 func_header: type TK_IDENTIFIER '(' l_func_par reset_func_par ')' .

    $default  reduce using rule 59 (func_header)


State 131

   11 dec: type TK_IDENTIFIER '[' exp ']' ';' .

    $default  reduce using rule 11 (dec)


State 132

   10 dec: type TK_IDENTIFIER '[' exp ']' ':' . vet_dec ';'

    LIT_INTEGER  shift, and go to state 23
    LIT_REAL     shift, and go to state 24
    LIT_CHAR     shift, and go to state 25

    lit      go to state 148
    vet_dec  go to state 149


State 133

   12 dec: type '#' TK_IDENTIFIER '=' lit ';' .

    $default  reduce using rule 12 (dec)


State 134

   30 cmd: TK_IDENTIFIER '=' '[' exp . ']' '#' exp
   31    | TK_IDENTIFIER '=' '[' exp . ']' '&' exp
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    ']'           shift, and go to state 150
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 135

   25 cmd: TK_IDENTIFIER '=' '#' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 25 (cmd)

    op  go to state 64


State 136

   26 cmd: TK_IDENTIFIER '=' '&' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 26 (cmd)

    op  go to state 64


State 137

   27 cmd: TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 151


State 138

   23 cmd: '#' TK_IDENTIFIER '=' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 23 (cmd)

    op  go to state 64


State 139

   28 cmd: '#' TK_IDENTIFIER '[' exp . ']' '=' exp
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    ']'           shift, and go to state 152
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 140

   24 cmd: '&' TK_IDENTIFIER '=' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 24 (cmd)

    op  go to state 64


State 141

   29 cmd: '&' TK_IDENTIFIER '[' exp . ']' '=' exp
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    ']'           shift, and go to state 153
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 142

   19 lcmd: cmd ';' cmd lcmd .

    $default  reduce using rule 19 (lcmd)


State 143

   13 reset: ',' func_args . reset

    ','  shift, and go to state 124

    $default  reduce using rule 14 (reset)

    reset  go to state 154


State 144

   51 func_call: TK_IDENTIFIER '(' l_func_args reset ')' .

    $default  reduce using rule 51 (func_call)


State 145

    5 dec: KW_IF '(' exp ')' KW_THEN lcmd KW_ELSE . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_PRINT       shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '#'            shift, and go to state 39
    '{'            shift, and go to state 20
    '&'            shift, and go to state 40

    KW_CHAR   [reduce using rule 18 (lcmd)]
    KW_INT    [reduce using rule 18 (lcmd)]
    KW_FLOAT  [reduce using rule 18 (lcmd)]
    KW_IF     [reduce using rule 18 (lcmd)]
    KW_WHILE  [reduce using rule 18 (lcmd)]
    KW_FOR    [reduce using rule 18 (lcmd)]
    ';'       reduce using rule 16 (block)
    ';'       [reduce using rule 36 (cmd)]
    $default  reduce using rule 18 (lcmd)

    dec          go to state 41
    block        go to state 42
    lcmd         go to state 155
    cmd          go to state 44
    type         go to state 10
    func_call    go to state 45
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 46
    read         go to state 47


State 146

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp . ')' lcmd
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    ')'           shift, and go to state 156
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    op  go to state 64


State 147

   63 reset_func_par: ',' func_par reset_func_par .

    $default  reduce using rule 63 (reset_func_par)


State 148

   43 vet_dec: lit . vet_dec
   44        | lit .

    LIT_INTEGER  shift, and go to state 23
    LIT_REAL     shift, and go to state 24
    LIT_CHAR     shift, and go to state 25

    $default  reduce using rule 44 (vet_dec)

    lit      go to state 148
    vet_dec  go to state 157


State 149

   10 dec: type TK_IDENTIFIER '[' exp ']' ':' vet_dec . ';'

    ';'  shift, and go to state 158


State 150

   30 cmd: TK_IDENTIFIER '=' '[' exp ']' . '#' exp
   31    | TK_IDENTIFIER '=' '[' exp ']' . '&' exp

    '#'  shift, and go to state 159
    '&'  shift, and go to state 160


State 151

   27 cmd: TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 161
    func_call  go to state 28


State 152

   28 cmd: '#' TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 162


State 153

   29 cmd: '&' TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 163


State 154

   13 reset: ',' func_args reset .

    $default  reduce using rule 13 (reset)


State 155

    5 dec: KW_IF '(' exp ')' KW_THEN lcmd KW_ELSE lcmd .

    $default  reduce using rule 5 (dec)


State 156

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 35
    KW_RETURN      shift, and go to state 36
    KW_PRINT       shift, and go to state 37
    TK_IDENTIFIER  shift, and go to state 38
    '#'            shift, and go to state 39
    '{'            shift, and go to state 20
    '&'            shift, and go to state 40

    KW_CHAR   [reduce using rule 18 (lcmd)]
    KW_INT    [reduce using rule 18 (lcmd)]
    KW_FLOAT  [reduce using rule 18 (lcmd)]
    KW_IF     [reduce using rule 18 (lcmd)]
    KW_WHILE  [reduce using rule 18 (lcmd)]
    KW_FOR    [reduce using rule 18 (lcmd)]
    ';'       reduce using rule 16 (block)
    ';'       [reduce using rule 36 (cmd)]
    $default  reduce using rule 18 (lcmd)

    dec          go to state 41
    block        go to state 42
    lcmd         go to state 164
    cmd          go to state 44
    type         go to state 10
    func_call    go to state 45
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 46
    read         go to state 47


State 157

   43 vet_dec: lit vet_dec .

    $default  reduce using rule 43 (vet_dec)


State 158

   10 dec: type TK_IDENTIFIER '[' exp ']' ':' vet_dec ';' .

    $default  reduce using rule 10 (dec)


State 159

   30 cmd: TK_IDENTIFIER '=' '[' exp ']' '#' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 165
    func_call  go to state 28


State 160

   31 cmd: TK_IDENTIFIER '=' '[' exp ']' '&' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 166
    func_call  go to state 28


State 161

   27 cmd: TK_IDENTIFIER '[' exp ']' '=' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 27 (cmd)

    op  go to state 64


State 162

   28 cmd: '#' TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 167
    func_call  go to state 28


State 163

   29 cmd: '&' TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25

    lit        go to state 26
    exp        go to state 168
    func_call  go to state 28


State 164

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd .

    $default  reduce using rule 7 (dec)


State 165

   30 cmd: TK_IDENTIFIER '=' '[' exp ']' '#' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 30 (cmd)

    op  go to state 64


State 166

   31 cmd: TK_IDENTIFIER '=' '[' exp ']' '&' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 31 (cmd)

    op  go to state 64


State 167

   28 cmd: '#' TK_IDENTIFIER '[' exp ']' '=' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 28 (cmd)

    op  go to state 64


State 168

   29 cmd: '&' TK_IDENTIFIER '[' exp ']' '=' exp .
   48 exp: exp . op exp

    OPERATOR_LE   shift, and go to state 50
    OPERATOR_GE   shift, and go to state 51
    OPERATOR_EQ   shift, and go to state 52
    OPERATOR_NE   shift, and go to state 53
    OPERATOR_AND  shift, and go to state 54
    OPERATOR_OR   shift, and go to state 55
    '+'           shift, and go to state 56
    '-'           shift, and go to state 57
    '*'           shift, and go to state 58
    '/'           shift, and go to state 59
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    '!'           shift, and go to state 63

    $default  reduce using rule 29 (cmd)

    op  go to state 64
