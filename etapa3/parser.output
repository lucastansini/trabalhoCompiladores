Terminals unused in grammar

   TOKEN_ERROR


Rules useless in parser due to conflicts

   34 cmd: %empty


State 20 conflicts: 1 reduce/reduce
State 36 conflicts: 3 shift/reduce
State 46 conflicts: 1 shift/reduce
State 48 conflicts: 12 shift/reduce
State 62 conflicts: 6 shift/reduce, 1 reduce/reduce
State 79 conflicts: 3 shift/reduce
State 87 conflicts: 13 shift/reduce, 17 reduce/reduce
State 96 conflicts: 2 shift/reduce
State 97 conflicts: 2 shift/reduce
State 98 conflicts: 2 shift/reduce
State 99 conflicts: 2 shift/reduce
State 100 conflicts: 2 shift/reduce
State 101 conflicts: 2 shift/reduce
State 102 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 2 shift/reduce
State 105 conflicts: 2 shift/reduce
State 106 conflicts: 6 shift/reduce, 1 reduce/reduce
State 107 conflicts: 12 shift/reduce
State 108 conflicts: 12 shift/reduce
State 132 conflicts: 7 shift/reduce, 1 reduce/reduce
State 138 conflicts: 1 shift/reduce
State 155 conflicts: 6 shift/reduce, 1 reduce/reduce
State 165 conflicts: 6 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: ldec

    2 ldec: dec ldec
    3     | %empty

    4 dec: KW_IF '(' exp ')' KW_THEN lcmd
    5    | KW_IF '(' exp ')' KW_THEN lcmd KW_ELSE lcmd
    6    | KW_WHILE '(' exp ')' lcmd
    7    | KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd
    8    | func_dec
    9    | type TK_IDENTIFIER '=' lit ';'
   10    | type TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   11    | type TK_IDENTIFIER '[' exp ']' ';'
   12    | type '#' TK_IDENTIFIER '=' lit ';'

   13 block: '{' lcmd '}'
   14      | %empty

   15 lcmd: cmd ';' lcmd
   16     | %empty
   17     | cmd ';' cmd lcmd
   18     | dec

   19 cmd: block
   20    | TK_IDENTIFIER '=' exp
   21    | '#' TK_IDENTIFIER '=' exp
   22    | '&' TK_IDENTIFIER '=' exp
   23    | TK_IDENTIFIER '=' '#' exp
   24    | TK_IDENTIFIER '=' '&' exp
   25    | TK_IDENTIFIER '[' exp ']' '=' exp
   26    | '#' TK_IDENTIFIER '[' exp ']' '=' exp
   27    | '&' TK_IDENTIFIER '[' exp ']' '=' exp
   28    | TK_IDENTIFIER '=' '[' exp ']' '#' exp
   29    | TK_IDENTIFIER '=' '[' exp ']' '&' exp
   30    | TK_IDENTIFIER '(' l_func_args ')'
   31    | print
   32    | read
   33    | KW_RETURN exp
   34    | %empty

   35 type: KW_INT
   36     | KW_FLOAT
   37     | KW_CHAR

   38 lit: LIT_REAL
   39    | LIT_CHAR
   40    | LIT_INTEGER

   41 vet_dec: lit vet_dec
   42        | lit

   43 exp: TK_IDENTIFIER
   44    | TK_IDENTIFIER '[' exp ']'
   45    | LIT_CHAR
   46    | LIT_INTEGER
   47    | LIT_REAL
   48    | exp '+' exp
   49    | exp '-' exp
   50    | exp '*' exp
   51    | exp '/' exp
   52    | exp '<' exp
   53    | exp '>' exp
   54    | '!' exp
   55    | exp OPERATOR_LE exp
   56    | exp OPERATOR_GE exp
   57    | exp OPERATOR_EQ exp
   58    | exp OPERATOR_NE exp
   59    | exp OPERATOR_OR exp
   60    | exp OPERATOR_AND exp
   61    | TK_IDENTIFIER '(' ')'
   62    | TK_IDENTIFIER '(' l_func_args ')'

   63 func_args: lit
   64          | TK_IDENTIFIER
   65          | '#' TK_IDENTIFIER
   66          | '&' TK_IDENTIFIER

   67 l_func_args: func_args l_func_args
   68            | %empty

   69 func_dec: func_header block

   70 func_header: type TK_IDENTIFIER '(' l_func_par reset_func_par ')'

   71 func_par: type TK_IDENTIFIER

   72 l_func_par: func_par l_func_par
   73           | %empty

   74 reset_func_par: ',' func_par reset_func_par
   75               | %empty

   76 print: KW_PRINT lpe

   77 pe: LIT_STRING
   78   | TK_IDENTIFIER
   79   | '&' TK_IDENTIFIER
   80   | '#' TK_IDENTIFIER

   81 lpe: pe lpe
   82    | %empty

   83 read: KW_READ TK_IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 54
'#' (35) 12 21 23 26 28 65 80
'&' (38) 22 24 27 29 66 79
'(' (40) 4 5 6 7 30 61 62 70
')' (41) 4 5 6 7 30 61 62 70
'*' (42) 50
'+' (43) 48
',' (44) 74
'-' (45) 49
'/' (47) 51
':' (58) 10
';' (59) 9 10 11 12 15 17
'<' (60) 52
'=' (61) 7 9 12 20 21 22 23 24 25 26 27 28 29
'>' (62) 53
'[' (91) 10 11 25 26 27 28 29 44
']' (93) 10 11 25 26 27 28 29 44
'{' (123) 13
'}' (125) 13
error (256)
KW_CHAR (258) 37
KW_INT (259) 35
KW_FLOAT (260) 36
KW_IF (261) 4 5
KW_THEN (262) 4 5
KW_ELSE (263) 5
KW_WHILE (264) 6
KW_FOR (265) 7
KW_READ (266) 83
KW_RETURN (267) 33
KW_PRINT (268) 76
KW_TO (269) 7
OPERATOR_LE (270) 55
OPERATOR_GE (271) 56
OPERATOR_EQ (272) 57
OPERATOR_NE (273) 58
OPERATOR_AND (274) 60
OPERATOR_OR (275) 59
TK_IDENTIFIER (276) 7 9 10 11 12 20 21 22 23 24 25 26 27 28 29 30 43
    44 61 62 64 65 66 70 71 78 79 80 83
LIT_INTEGER (277) 40 46
LIT_REAL (278) 38 47
LIT_CHAR (279) 39 45
LIT_STRING (280) 77
TOKEN_ERROR (281)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
ldec (48)
    on left: 2 3, on right: 1 2
dec (49)
    on left: 4 5 6 7 8 9 10 11 12, on right: 2 18
block (50)
    on left: 13 14, on right: 19 69
lcmd (51)
    on left: 15 16 17 18, on right: 4 5 6 7 13 15 17
cmd (52)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34, on right:
    15 17
type (53)
    on left: 35 36 37, on right: 9 10 11 12 70 71
lit (54)
    on left: 38 39 40, on right: 9 12 41 42 63
vet_dec (55)
    on left: 41 42, on right: 10 41
exp (56)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
    61 62, on right: 4 5 6 7 10 11 20 21 22 23 24 25 26 27 28 29 33
    44 48 49 50 51 52 53 54 55 56 57 58 59 60
func_args (57)
    on left: 63 64 65 66, on right: 67
l_func_args (58)
    on left: 67 68, on right: 30 62 67
func_dec (59)
    on left: 69, on right: 8
func_header (60)
    on left: 70, on right: 69
func_par (61)
    on left: 71, on right: 72 74
l_func_par (62)
    on left: 72 73, on right: 70 72
reset_func_par (63)
    on left: 74 75, on right: 70 74
print (64)
    on left: 76, on right: 31
pe (65)
    on left: 77 78 79 80, on right: 81
lpe (66)
    on left: 81 82, on right: 76 81
read (67)
    on left: 83, on right: 32


State 0

    0 $accept: . program $end

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3
    KW_IF     shift, and go to state 4
    KW_WHILE  shift, and go to state 5
    KW_FOR    shift, and go to state 6

    $default  reduce using rule 3 (ldec)

    program      go to state 7
    ldec         go to state 8
    dec          go to state 9
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12


State 1

   37 type: KW_CHAR .

    $default  reduce using rule 37 (type)


State 2

   35 type: KW_INT .

    $default  reduce using rule 35 (type)


State 3

   36 type: KW_FLOAT .

    $default  reduce using rule 36 (type)


State 4

    4 dec: KW_IF . '(' exp ')' KW_THEN lcmd
    5    | KW_IF . '(' exp ')' KW_THEN lcmd KW_ELSE lcmd

    '('  shift, and go to state 13


State 5

    6 dec: KW_WHILE . '(' exp ')' lcmd

    '('  shift, and go to state 14


State 6

    7 dec: KW_FOR . '(' TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd

    '('  shift, and go to state 15


State 7

    0 $accept: program . $end

    $end  shift, and go to state 16


State 8

    1 program: ldec .

    $default  reduce using rule 1 (program)


State 9

    2 ldec: dec . ldec

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3
    KW_IF     shift, and go to state 4
    KW_WHILE  shift, and go to state 5
    KW_FOR    shift, and go to state 6

    $default  reduce using rule 3 (ldec)

    ldec         go to state 17
    dec          go to state 9
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12


State 10

    9 dec: type . TK_IDENTIFIER '=' lit ';'
   10    | type . TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   11    | type . TK_IDENTIFIER '[' exp ']' ';'
   12    | type . '#' TK_IDENTIFIER '=' lit ';'
   70 func_header: type . TK_IDENTIFIER '(' l_func_par reset_func_par ')'

    TK_IDENTIFIER  shift, and go to state 18
    '#'            shift, and go to state 19


State 11

    8 dec: func_dec .

    $default  reduce using rule 8 (dec)


State 12

   69 func_dec: func_header . block

    '{'  shift, and go to state 20

    $default  reduce using rule 14 (block)

    block  go to state 21


State 13

    4 dec: KW_IF '(' . exp ')' KW_THEN lcmd
    5    | KW_IF '(' . exp ')' KW_THEN lcmd KW_ELSE lcmd

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 27


State 14

    6 dec: KW_WHILE '(' . exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 28


State 15

    7 dec: KW_FOR '(' . TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 29


State 16

    0 $accept: program $end .

    $default  accept


State 17

    2 ldec: dec ldec .

    $default  reduce using rule 2 (ldec)


State 18

    9 dec: type TK_IDENTIFIER . '=' lit ';'
   10    | type TK_IDENTIFIER . '[' exp ']' ':' vet_dec ';'
   11    | type TK_IDENTIFIER . '[' exp ']' ';'
   70 func_header: type TK_IDENTIFIER . '(' l_func_par reset_func_par ')'

    '='  shift, and go to state 30
    '('  shift, and go to state 31
    '['  shift, and go to state 32


State 19

   12 dec: type '#' . TK_IDENTIFIER '=' lit ';'

    TK_IDENTIFIER  shift, and go to state 33


State 20

   13 block: '{' . lcmd '}'

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 34
    KW_RETURN      shift, and go to state 35
    KW_PRINT       shift, and go to state 36
    TK_IDENTIFIER  shift, and go to state 37
    '#'            shift, and go to state 38
    '{'            shift, and go to state 20
    '&'            shift, and go to state 39

    ';'       reduce using rule 14 (block)
    ';'       [reduce using rule 34 (cmd)]
    '}'       reduce using rule 16 (lcmd)
    $default  reduce using rule 14 (block)

    dec          go to state 40
    block        go to state 41
    lcmd         go to state 42
    cmd          go to state 43
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 44
    read         go to state 45


State 21

   69 func_dec: func_header block .

    $default  reduce using rule 69 (func_dec)


State 22

   43 exp: TK_IDENTIFIER .
   44    | TK_IDENTIFIER . '[' exp ']'
   61    | TK_IDENTIFIER . '(' ')'
   62    | TK_IDENTIFIER . '(' l_func_args ')'

    '('  shift, and go to state 46
    '['  shift, and go to state 47

    $default  reduce using rule 43 (exp)


State 23

   46 exp: LIT_INTEGER .

    $default  reduce using rule 46 (exp)


State 24

   47 exp: LIT_REAL .

    $default  reduce using rule 47 (exp)


State 25

   45 exp: LIT_CHAR .

    $default  reduce using rule 45 (exp)


State 26

   54 exp: '!' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 48


State 27

    4 dec: KW_IF '(' exp . ')' KW_THEN lcmd
    5    | KW_IF '(' exp . ')' KW_THEN lcmd KW_ELSE lcmd
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    ')'           shift, and go to state 59
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 28

    6 dec: KW_WHILE '(' exp . ')' lcmd
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    ')'           shift, and go to state 62
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 29

    7 dec: KW_FOR '(' TK_IDENTIFIER . '=' exp KW_TO exp ')' lcmd

    '='  shift, and go to state 63


State 30

    9 dec: type TK_IDENTIFIER '=' . lit ';'

    LIT_INTEGER  shift, and go to state 64
    LIT_REAL     shift, and go to state 65
    LIT_CHAR     shift, and go to state 66

    lit  go to state 67


State 31

   70 func_header: type TK_IDENTIFIER '(' . l_func_par reset_func_par ')'

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 73 (l_func_par)

    type        go to state 68
    func_par    go to state 69
    l_func_par  go to state 70


State 32

   10 dec: type TK_IDENTIFIER '[' . exp ']' ':' vet_dec ';'
   11    | type TK_IDENTIFIER '[' . exp ']' ';'

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 71


State 33

   12 dec: type '#' TK_IDENTIFIER . '=' lit ';'

    '='  shift, and go to state 72


State 34

   83 read: KW_READ . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 73


State 35

   33 cmd: KW_RETURN . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 74


State 36

   76 print: KW_PRINT . lpe

    TK_IDENTIFIER  shift, and go to state 75
    LIT_STRING     shift, and go to state 76
    '#'            shift, and go to state 77
    '&'            shift, and go to state 78

    TK_IDENTIFIER  [reduce using rule 82 (lpe)]
    '#'            [reduce using rule 82 (lpe)]
    '&'            [reduce using rule 82 (lpe)]
    $default       reduce using rule 82 (lpe)

    pe   go to state 79
    lpe  go to state 80


State 37

   20 cmd: TK_IDENTIFIER . '=' exp
   23    | TK_IDENTIFIER . '=' '#' exp
   24    | TK_IDENTIFIER . '=' '&' exp
   25    | TK_IDENTIFIER . '[' exp ']' '=' exp
   28    | TK_IDENTIFIER . '=' '[' exp ']' '#' exp
   29    | TK_IDENTIFIER . '=' '[' exp ']' '&' exp
   30    | TK_IDENTIFIER . '(' l_func_args ')'

    '='  shift, and go to state 81
    '('  shift, and go to state 82
    '['  shift, and go to state 83


State 38

   21 cmd: '#' . TK_IDENTIFIER '=' exp
   26    | '#' . TK_IDENTIFIER '[' exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 84


State 39

   22 cmd: '&' . TK_IDENTIFIER '=' exp
   27    | '&' . TK_IDENTIFIER '[' exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 85


State 40

   18 lcmd: dec .

    $default  reduce using rule 18 (lcmd)


State 41

   19 cmd: block .

    $default  reduce using rule 19 (cmd)


State 42

   13 block: '{' lcmd . '}'

    '}'  shift, and go to state 86


State 43

   15 lcmd: cmd . ';' lcmd
   17     | cmd . ';' cmd lcmd

    ';'  shift, and go to state 87


State 44

   31 cmd: print .

    $default  reduce using rule 31 (cmd)


State 45

   32 cmd: read .

    $default  reduce using rule 32 (cmd)


State 46

   61 exp: TK_IDENTIFIER '(' . ')'
   62    | TK_IDENTIFIER '(' . l_func_args ')'

    TK_IDENTIFIER  shift, and go to state 88
    LIT_INTEGER    shift, and go to state 64
    LIT_REAL       shift, and go to state 65
    LIT_CHAR       shift, and go to state 66
    ')'            shift, and go to state 89
    '#'            shift, and go to state 90
    '&'            shift, and go to state 91

    ')'  [reduce using rule 68 (l_func_args)]

    lit          go to state 92
    func_args    go to state 93
    l_func_args  go to state 94


State 47

   44 exp: TK_IDENTIFIER '[' . exp ']'

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 95


State 48

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   54    | '!' exp .
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    OPERATOR_LE   [reduce using rule 54 (exp)]
    OPERATOR_GE   [reduce using rule 54 (exp)]
    OPERATOR_EQ   [reduce using rule 54 (exp)]
    OPERATOR_NE   [reduce using rule 54 (exp)]
    OPERATOR_AND  [reduce using rule 54 (exp)]
    OPERATOR_OR   [reduce using rule 54 (exp)]
    '+'           [reduce using rule 54 (exp)]
    '-'           [reduce using rule 54 (exp)]
    '*'           [reduce using rule 54 (exp)]
    '/'           [reduce using rule 54 (exp)]
    '<'           [reduce using rule 54 (exp)]
    '>'           [reduce using rule 54 (exp)]
    $default      reduce using rule 54 (exp)


State 49

   55 exp: exp OPERATOR_LE . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 96


State 50

   56 exp: exp OPERATOR_GE . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 97


State 51

   57 exp: exp OPERATOR_EQ . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 98


State 52

   58 exp: exp OPERATOR_NE . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 99


State 53

   60 exp: exp OPERATOR_AND . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 100


State 54

   59 exp: exp OPERATOR_OR . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 101


State 55

   48 exp: exp '+' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 102


State 56

   49 exp: exp '-' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 103


State 57

   50 exp: exp '*' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 104


State 58

   51 exp: exp '/' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 105


State 59

    4 dec: KW_IF '(' exp ')' . KW_THEN lcmd
    5    | KW_IF '(' exp ')' . KW_THEN lcmd KW_ELSE lcmd

    KW_THEN  shift, and go to state 106


State 60

   52 exp: exp '<' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 107


State 61

   53 exp: exp '>' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 108


State 62

    6 dec: KW_WHILE '(' exp ')' . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 34
    KW_RETURN      shift, and go to state 35
    KW_PRINT       shift, and go to state 36
    TK_IDENTIFIER  shift, and go to state 37
    '#'            shift, and go to state 38
    '{'            shift, and go to state 20
    '&'            shift, and go to state 39

    KW_CHAR   [reduce using rule 16 (lcmd)]
    KW_INT    [reduce using rule 16 (lcmd)]
    KW_FLOAT  [reduce using rule 16 (lcmd)]
    KW_IF     [reduce using rule 16 (lcmd)]
    KW_WHILE  [reduce using rule 16 (lcmd)]
    KW_FOR    [reduce using rule 16 (lcmd)]
    ';'       reduce using rule 14 (block)
    ';'       [reduce using rule 34 (cmd)]
    $default  reduce using rule 16 (lcmd)

    dec          go to state 40
    block        go to state 41
    lcmd         go to state 109
    cmd          go to state 43
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 44
    read         go to state 45


State 63

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' . exp KW_TO exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 110


State 64

   40 lit: LIT_INTEGER .

    $default  reduce using rule 40 (lit)


State 65

   38 lit: LIT_REAL .

    $default  reduce using rule 38 (lit)


State 66

   39 lit: LIT_CHAR .

    $default  reduce using rule 39 (lit)


State 67

    9 dec: type TK_IDENTIFIER '=' lit . ';'

    ';'  shift, and go to state 111


State 68

   71 func_par: type . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 112


State 69

   72 l_func_par: func_par . l_func_par

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    $default  reduce using rule 73 (l_func_par)

    type        go to state 68
    func_par    go to state 69
    l_func_par  go to state 113


State 70

   70 func_header: type TK_IDENTIFIER '(' l_func_par . reset_func_par ')'

    ','  shift, and go to state 114

    $default  reduce using rule 75 (reset_func_par)

    reset_func_par  go to state 115


State 71

   10 dec: type TK_IDENTIFIER '[' exp . ']' ':' vet_dec ';'
   11    | type TK_IDENTIFIER '[' exp . ']' ';'
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    ']'           shift, and go to state 116
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 72

   12 dec: type '#' TK_IDENTIFIER '=' . lit ';'

    LIT_INTEGER  shift, and go to state 64
    LIT_REAL     shift, and go to state 65
    LIT_CHAR     shift, and go to state 66

    lit  go to state 117


State 73

   83 read: KW_READ TK_IDENTIFIER .

    $default  reduce using rule 83 (read)


State 74

   33 cmd: KW_RETURN exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 33 (cmd)


State 75

   78 pe: TK_IDENTIFIER .

    $default  reduce using rule 78 (pe)


State 76

   77 pe: LIT_STRING .

    $default  reduce using rule 77 (pe)


State 77

   80 pe: '#' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 118


State 78

   79 pe: '&' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 119


State 79

   81 lpe: pe . lpe

    TK_IDENTIFIER  shift, and go to state 75
    LIT_STRING     shift, and go to state 76
    '#'            shift, and go to state 77
    '&'            shift, and go to state 78

    TK_IDENTIFIER  [reduce using rule 82 (lpe)]
    '#'            [reduce using rule 82 (lpe)]
    '&'            [reduce using rule 82 (lpe)]
    $default       reduce using rule 82 (lpe)

    pe   go to state 79
    lpe  go to state 120


State 80

   76 print: KW_PRINT lpe .

    $default  reduce using rule 76 (print)


State 81

   20 cmd: TK_IDENTIFIER '=' . exp
   23    | TK_IDENTIFIER '=' . '#' exp
   24    | TK_IDENTIFIER '=' . '&' exp
   28    | TK_IDENTIFIER '=' . '[' exp ']' '#' exp
   29    | TK_IDENTIFIER '=' . '[' exp ']' '&' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '['            shift, and go to state 121
    '#'            shift, and go to state 122
    '&'            shift, and go to state 123
    '!'            shift, and go to state 26

    exp  go to state 124


State 82

   30 cmd: TK_IDENTIFIER '(' . l_func_args ')'

    TK_IDENTIFIER  shift, and go to state 88
    LIT_INTEGER    shift, and go to state 64
    LIT_REAL       shift, and go to state 65
    LIT_CHAR       shift, and go to state 66
    '#'            shift, and go to state 90
    '&'            shift, and go to state 91

    $default  reduce using rule 68 (l_func_args)

    lit          go to state 92
    func_args    go to state 93
    l_func_args  go to state 125


State 83

   25 cmd: TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 126


State 84

   21 cmd: '#' TK_IDENTIFIER . '=' exp
   26    | '#' TK_IDENTIFIER . '[' exp ']' '=' exp

    '='  shift, and go to state 127
    '['  shift, and go to state 128


State 85

   22 cmd: '&' TK_IDENTIFIER . '=' exp
   27    | '&' TK_IDENTIFIER . '[' exp ']' '=' exp

    '='  shift, and go to state 129
    '['  shift, and go to state 130


State 86

   13 block: '{' lcmd '}' .

    $default  reduce using rule 13 (block)


State 87

   15 lcmd: cmd ';' . lcmd
   17     | cmd ';' . cmd lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 34
    KW_RETURN      shift, and go to state 35
    KW_PRINT       shift, and go to state 36
    TK_IDENTIFIER  shift, and go to state 37
    '#'            shift, and go to state 38
    '{'            shift, and go to state 20
    '&'            shift, and go to state 39

    $end           reduce using rule 14 (block)
    $end           [reduce using rule 16 (lcmd)]
    $end           [reduce using rule 34 (cmd)]
    KW_CHAR        [reduce using rule 14 (block)]
    KW_CHAR        [reduce using rule 16 (lcmd)]
    KW_CHAR        [reduce using rule 34 (cmd)]
    KW_INT         [reduce using rule 14 (block)]
    KW_INT         [reduce using rule 16 (lcmd)]
    KW_INT         [reduce using rule 34 (cmd)]
    KW_FLOAT       [reduce using rule 14 (block)]
    KW_FLOAT       [reduce using rule 16 (lcmd)]
    KW_FLOAT       [reduce using rule 34 (cmd)]
    KW_IF          [reduce using rule 14 (block)]
    KW_IF          [reduce using rule 16 (lcmd)]
    KW_IF          [reduce using rule 34 (cmd)]
    KW_ELSE        reduce using rule 14 (block)
    KW_ELSE        [reduce using rule 16 (lcmd)]
    KW_ELSE        [reduce using rule 34 (cmd)]
    KW_WHILE       [reduce using rule 14 (block)]
    KW_WHILE       [reduce using rule 16 (lcmd)]
    KW_WHILE       [reduce using rule 34 (cmd)]
    KW_FOR         [reduce using rule 14 (block)]
    KW_FOR         [reduce using rule 16 (lcmd)]
    KW_FOR         [reduce using rule 34 (cmd)]
    KW_READ        [reduce using rule 14 (block)]
    KW_READ        [reduce using rule 34 (cmd)]
    KW_RETURN      [reduce using rule 14 (block)]
    KW_RETURN      [reduce using rule 34 (cmd)]
    KW_PRINT       [reduce using rule 14 (block)]
    KW_PRINT       [reduce using rule 34 (cmd)]
    TK_IDENTIFIER  [reduce using rule 14 (block)]
    TK_IDENTIFIER  [reduce using rule 34 (cmd)]
    ';'            reduce using rule 14 (block)
    ';'            [reduce using rule 34 (cmd)]
    '#'            [reduce using rule 14 (block)]
    '#'            [reduce using rule 34 (cmd)]
    '{'            [reduce using rule 14 (block)]
    '{'            [reduce using rule 34 (cmd)]
    '}'            reduce using rule 14 (block)
    '}'            [reduce using rule 16 (lcmd)]
    '}'            [reduce using rule 34 (cmd)]
    '&'            [reduce using rule 14 (block)]
    '&'            [reduce using rule 34 (cmd)]
    $default       reduce using rule 14 (block)

    dec          go to state 40
    block        go to state 41
    lcmd         go to state 131
    cmd          go to state 132
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 44
    read         go to state 45


State 88

   64 func_args: TK_IDENTIFIER .

    $default  reduce using rule 64 (func_args)


State 89

   61 exp: TK_IDENTIFIER '(' ')' .

    $default  reduce using rule 61 (exp)


State 90

   65 func_args: '#' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 133


State 91

   66 func_args: '&' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 134


State 92

   63 func_args: lit .

    $default  reduce using rule 63 (func_args)


State 93

   67 l_func_args: func_args . l_func_args

    TK_IDENTIFIER  shift, and go to state 88
    LIT_INTEGER    shift, and go to state 64
    LIT_REAL       shift, and go to state 65
    LIT_CHAR       shift, and go to state 66
    '#'            shift, and go to state 90
    '&'            shift, and go to state 91

    $default  reduce using rule 68 (l_func_args)

    lit          go to state 92
    func_args    go to state 93
    l_func_args  go to state 135


State 94

   62 exp: TK_IDENTIFIER '(' l_func_args . ')'

    ')'  shift, and go to state 136


State 95

   44 exp: TK_IDENTIFIER '[' exp . ']'
   48    | exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    ']'           shift, and go to state 137
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 96

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   55    | exp OPERATOR_LE exp .
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    '<'  shift, and go to state 60
    '>'  shift, and go to state 61

    '<'       [reduce using rule 55 (exp)]
    '>'       [reduce using rule 55 (exp)]
    $default  reduce using rule 55 (exp)


State 97

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   56    | exp OPERATOR_GE exp .
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    '<'  shift, and go to state 60
    '>'  shift, and go to state 61

    '<'       [reduce using rule 56 (exp)]
    '>'       [reduce using rule 56 (exp)]
    $default  reduce using rule 56 (exp)


State 98

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   57    | exp OPERATOR_EQ exp .
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    '<'  shift, and go to state 60
    '>'  shift, and go to state 61

    '<'       [reduce using rule 57 (exp)]
    '>'       [reduce using rule 57 (exp)]
    $default  reduce using rule 57 (exp)


State 99

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   58    | exp OPERATOR_NE exp .
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    '<'  shift, and go to state 60
    '>'  shift, and go to state 61

    '<'       [reduce using rule 58 (exp)]
    '>'       [reduce using rule 58 (exp)]
    $default  reduce using rule 58 (exp)


State 100

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp
   60    | exp OPERATOR_AND exp .

    '<'  shift, and go to state 60
    '>'  shift, and go to state 61

    '<'       [reduce using rule 60 (exp)]
    '>'       [reduce using rule 60 (exp)]
    $default  reduce using rule 60 (exp)


State 101

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   59    | exp OPERATOR_OR exp .
   60    | exp . OPERATOR_AND exp

    '<'  shift, and go to state 60
    '>'  shift, and go to state 61

    '<'       [reduce using rule 59 (exp)]
    '>'       [reduce using rule 59 (exp)]
    $default  reduce using rule 59 (exp)


State 102

   48 exp: exp . '+' exp
   48    | exp '+' exp .
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    '<'       [reduce using rule 48 (exp)]
    '>'       [reduce using rule 48 (exp)]
    $default  reduce using rule 48 (exp)


State 103

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   49    | exp '-' exp .
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    '<'       [reduce using rule 49 (exp)]
    '>'       [reduce using rule 49 (exp)]
    $default  reduce using rule 49 (exp)


State 104

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   50    | exp '*' exp .
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    '<'       [reduce using rule 50 (exp)]
    '>'       [reduce using rule 50 (exp)]
    $default  reduce using rule 50 (exp)


State 105

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   51    | exp '/' exp .
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    '<'       [reduce using rule 51 (exp)]
    '>'       [reduce using rule 51 (exp)]
    $default  reduce using rule 51 (exp)


State 106

    4 dec: KW_IF '(' exp ')' KW_THEN . lcmd
    5    | KW_IF '(' exp ')' KW_THEN . lcmd KW_ELSE lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 34
    KW_RETURN      shift, and go to state 35
    KW_PRINT       shift, and go to state 36
    TK_IDENTIFIER  shift, and go to state 37
    '#'            shift, and go to state 38
    '{'            shift, and go to state 20
    '&'            shift, and go to state 39

    KW_CHAR   [reduce using rule 16 (lcmd)]
    KW_INT    [reduce using rule 16 (lcmd)]
    KW_FLOAT  [reduce using rule 16 (lcmd)]
    KW_IF     [reduce using rule 16 (lcmd)]
    KW_WHILE  [reduce using rule 16 (lcmd)]
    KW_FOR    [reduce using rule 16 (lcmd)]
    ';'       reduce using rule 14 (block)
    ';'       [reduce using rule 34 (cmd)]
    $default  reduce using rule 16 (lcmd)

    dec          go to state 40
    block        go to state 41
    lcmd         go to state 138
    cmd          go to state 43
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 44
    read         go to state 45


State 107

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   52    | exp '<' exp .
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    OPERATOR_LE   [reduce using rule 52 (exp)]
    OPERATOR_GE   [reduce using rule 52 (exp)]
    OPERATOR_EQ   [reduce using rule 52 (exp)]
    OPERATOR_NE   [reduce using rule 52 (exp)]
    OPERATOR_AND  [reduce using rule 52 (exp)]
    OPERATOR_OR   [reduce using rule 52 (exp)]
    '+'           [reduce using rule 52 (exp)]
    '-'           [reduce using rule 52 (exp)]
    '*'           [reduce using rule 52 (exp)]
    '/'           [reduce using rule 52 (exp)]
    '<'           [reduce using rule 52 (exp)]
    '>'           [reduce using rule 52 (exp)]
    $default      reduce using rule 52 (exp)


State 108

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   53    | exp '>' exp .
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    OPERATOR_LE   [reduce using rule 53 (exp)]
    OPERATOR_GE   [reduce using rule 53 (exp)]
    OPERATOR_EQ   [reduce using rule 53 (exp)]
    OPERATOR_NE   [reduce using rule 53 (exp)]
    OPERATOR_AND  [reduce using rule 53 (exp)]
    OPERATOR_OR   [reduce using rule 53 (exp)]
    '+'           [reduce using rule 53 (exp)]
    '-'           [reduce using rule 53 (exp)]
    '*'           [reduce using rule 53 (exp)]
    '/'           [reduce using rule 53 (exp)]
    '<'           [reduce using rule 53 (exp)]
    '>'           [reduce using rule 53 (exp)]
    $default      reduce using rule 53 (exp)


State 109

    6 dec: KW_WHILE '(' exp ')' lcmd .

    $default  reduce using rule 6 (dec)


State 110

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp . KW_TO exp ')' lcmd
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    KW_TO         shift, and go to state 139
    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 111

    9 dec: type TK_IDENTIFIER '=' lit ';' .

    $default  reduce using rule 9 (dec)


State 112

   71 func_par: type TK_IDENTIFIER .

    $default  reduce using rule 71 (func_par)


State 113

   72 l_func_par: func_par l_func_par .

    $default  reduce using rule 72 (l_func_par)


State 114

   74 reset_func_par: ',' . func_par reset_func_par

    KW_CHAR   shift, and go to state 1
    KW_INT    shift, and go to state 2
    KW_FLOAT  shift, and go to state 3

    type      go to state 68
    func_par  go to state 140


State 115

   70 func_header: type TK_IDENTIFIER '(' l_func_par reset_func_par . ')'

    ')'  shift, and go to state 141


State 116

   10 dec: type TK_IDENTIFIER '[' exp ']' . ':' vet_dec ';'
   11    | type TK_IDENTIFIER '[' exp ']' . ';'

    ';'  shift, and go to state 142
    ':'  shift, and go to state 143


State 117

   12 dec: type '#' TK_IDENTIFIER '=' lit . ';'

    ';'  shift, and go to state 144


State 118

   80 pe: '#' TK_IDENTIFIER .

    $default  reduce using rule 80 (pe)


State 119

   79 pe: '&' TK_IDENTIFIER .

    $default  reduce using rule 79 (pe)


State 120

   81 lpe: pe lpe .

    $default  reduce using rule 81 (lpe)


State 121

   28 cmd: TK_IDENTIFIER '=' '[' . exp ']' '#' exp
   29    | TK_IDENTIFIER '=' '[' . exp ']' '&' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 145


State 122

   23 cmd: TK_IDENTIFIER '=' '#' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 146


State 123

   24 cmd: TK_IDENTIFIER '=' '&' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 147


State 124

   20 cmd: TK_IDENTIFIER '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 20 (cmd)


State 125

   30 cmd: TK_IDENTIFIER '(' l_func_args . ')'

    ')'  shift, and go to state 148


State 126

   25 cmd: TK_IDENTIFIER '[' exp . ']' '=' exp
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    ']'           shift, and go to state 149
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 127

   21 cmd: '#' TK_IDENTIFIER '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 150


State 128

   26 cmd: '#' TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 151


State 129

   22 cmd: '&' TK_IDENTIFIER '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 152


State 130

   27 cmd: '&' TK_IDENTIFIER '[' . exp ']' '=' exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 153


State 131

   15 lcmd: cmd ';' lcmd .

    $default  reduce using rule 15 (lcmd)


State 132

   15 lcmd: cmd . ';' lcmd
   17     | cmd . ';' cmd lcmd
   17     | cmd ';' cmd . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 34
    KW_RETURN      shift, and go to state 35
    KW_PRINT       shift, and go to state 36
    TK_IDENTIFIER  shift, and go to state 37
    ';'            shift, and go to state 87
    '#'            shift, and go to state 38
    '{'            shift, and go to state 20
    '&'            shift, and go to state 39

    KW_CHAR   [reduce using rule 16 (lcmd)]
    KW_INT    [reduce using rule 16 (lcmd)]
    KW_FLOAT  [reduce using rule 16 (lcmd)]
    KW_IF     [reduce using rule 16 (lcmd)]
    KW_WHILE  [reduce using rule 16 (lcmd)]
    KW_FOR    [reduce using rule 16 (lcmd)]
    ';'       [reduce using rule 14 (block)]
    ';'       [reduce using rule 34 (cmd)]
    $default  reduce using rule 16 (lcmd)

    dec          go to state 40
    block        go to state 41
    lcmd         go to state 154
    cmd          go to state 43
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 44
    read         go to state 45


State 133

   65 func_args: '#' TK_IDENTIFIER .

    $default  reduce using rule 65 (func_args)


State 134

   66 func_args: '&' TK_IDENTIFIER .

    $default  reduce using rule 66 (func_args)


State 135

   67 l_func_args: func_args l_func_args .

    $default  reduce using rule 67 (l_func_args)


State 136

   62 exp: TK_IDENTIFIER '(' l_func_args ')' .

    $default  reduce using rule 62 (exp)


State 137

   44 exp: TK_IDENTIFIER '[' exp ']' .

    $default  reduce using rule 44 (exp)


State 138

    4 dec: KW_IF '(' exp ')' KW_THEN lcmd .
    5    | KW_IF '(' exp ')' KW_THEN lcmd . KW_ELSE lcmd

    KW_ELSE  shift, and go to state 155

    KW_ELSE   [reduce using rule 4 (dec)]
    $default  reduce using rule 4 (dec)


State 139

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO . exp ')' lcmd

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 156


State 140

   74 reset_func_par: ',' func_par . reset_func_par

    ','  shift, and go to state 114

    $default  reduce using rule 75 (reset_func_par)

    reset_func_par  go to state 157


State 141

   70 func_header: type TK_IDENTIFIER '(' l_func_par reset_func_par ')' .

    $default  reduce using rule 70 (func_header)


State 142

   11 dec: type TK_IDENTIFIER '[' exp ']' ';' .

    $default  reduce using rule 11 (dec)


State 143

   10 dec: type TK_IDENTIFIER '[' exp ']' ':' . vet_dec ';'

    LIT_INTEGER  shift, and go to state 64
    LIT_REAL     shift, and go to state 65
    LIT_CHAR     shift, and go to state 66

    lit      go to state 158
    vet_dec  go to state 159


State 144

   12 dec: type '#' TK_IDENTIFIER '=' lit ';' .

    $default  reduce using rule 12 (dec)


State 145

   28 cmd: TK_IDENTIFIER '=' '[' exp . ']' '#' exp
   29    | TK_IDENTIFIER '=' '[' exp . ']' '&' exp
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    ']'           shift, and go to state 160
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 146

   23 cmd: TK_IDENTIFIER '=' '#' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 23 (cmd)


State 147

   24 cmd: TK_IDENTIFIER '=' '&' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 24 (cmd)


State 148

   30 cmd: TK_IDENTIFIER '(' l_func_args ')' .

    $default  reduce using rule 30 (cmd)


State 149

   25 cmd: TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 161


State 150

   21 cmd: '#' TK_IDENTIFIER '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 21 (cmd)


State 151

   26 cmd: '#' TK_IDENTIFIER '[' exp . ']' '=' exp
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    ']'           shift, and go to state 162
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 152

   22 cmd: '&' TK_IDENTIFIER '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 22 (cmd)


State 153

   27 cmd: '&' TK_IDENTIFIER '[' exp . ']' '=' exp
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    ']'           shift, and go to state 163
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 154

   17 lcmd: cmd ';' cmd lcmd .

    $default  reduce using rule 17 (lcmd)


State 155

    5 dec: KW_IF '(' exp ')' KW_THEN lcmd KW_ELSE . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 34
    KW_RETURN      shift, and go to state 35
    KW_PRINT       shift, and go to state 36
    TK_IDENTIFIER  shift, and go to state 37
    '#'            shift, and go to state 38
    '{'            shift, and go to state 20
    '&'            shift, and go to state 39

    KW_CHAR   [reduce using rule 16 (lcmd)]
    KW_INT    [reduce using rule 16 (lcmd)]
    KW_FLOAT  [reduce using rule 16 (lcmd)]
    KW_IF     [reduce using rule 16 (lcmd)]
    KW_WHILE  [reduce using rule 16 (lcmd)]
    KW_FOR    [reduce using rule 16 (lcmd)]
    ';'       reduce using rule 14 (block)
    ';'       [reduce using rule 34 (cmd)]
    $default  reduce using rule 16 (lcmd)

    dec          go to state 40
    block        go to state 41
    lcmd         go to state 164
    cmd          go to state 43
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 44
    read         go to state 45


State 156

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp . ')' lcmd
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    ')'           shift, and go to state 165
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61


State 157

   74 reset_func_par: ',' func_par reset_func_par .

    $default  reduce using rule 74 (reset_func_par)


State 158

   41 vet_dec: lit . vet_dec
   42        | lit .

    LIT_INTEGER  shift, and go to state 64
    LIT_REAL     shift, and go to state 65
    LIT_CHAR     shift, and go to state 66

    $default  reduce using rule 42 (vet_dec)

    lit      go to state 158
    vet_dec  go to state 166


State 159

   10 dec: type TK_IDENTIFIER '[' exp ']' ':' vet_dec . ';'

    ';'  shift, and go to state 167


State 160

   28 cmd: TK_IDENTIFIER '=' '[' exp ']' . '#' exp
   29    | TK_IDENTIFIER '=' '[' exp ']' . '&' exp

    '#'  shift, and go to state 168
    '&'  shift, and go to state 169


State 161

   25 cmd: TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 170


State 162

   26 cmd: '#' TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 171


State 163

   27 cmd: '&' TK_IDENTIFIER '[' exp ']' . '=' exp

    '='  shift, and go to state 172


State 164

    5 dec: KW_IF '(' exp ')' KW_THEN lcmd KW_ELSE lcmd .

    $default  reduce using rule 5 (dec)


State 165

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' . lcmd

    KW_CHAR        shift, and go to state 1
    KW_INT         shift, and go to state 2
    KW_FLOAT       shift, and go to state 3
    KW_IF          shift, and go to state 4
    KW_WHILE       shift, and go to state 5
    KW_FOR         shift, and go to state 6
    KW_READ        shift, and go to state 34
    KW_RETURN      shift, and go to state 35
    KW_PRINT       shift, and go to state 36
    TK_IDENTIFIER  shift, and go to state 37
    '#'            shift, and go to state 38
    '{'            shift, and go to state 20
    '&'            shift, and go to state 39

    KW_CHAR   [reduce using rule 16 (lcmd)]
    KW_INT    [reduce using rule 16 (lcmd)]
    KW_FLOAT  [reduce using rule 16 (lcmd)]
    KW_IF     [reduce using rule 16 (lcmd)]
    KW_WHILE  [reduce using rule 16 (lcmd)]
    KW_FOR    [reduce using rule 16 (lcmd)]
    ';'       reduce using rule 14 (block)
    ';'       [reduce using rule 34 (cmd)]
    $default  reduce using rule 16 (lcmd)

    dec          go to state 40
    block        go to state 41
    lcmd         go to state 173
    cmd          go to state 43
    type         go to state 10
    func_dec     go to state 11
    func_header  go to state 12
    print        go to state 44
    read         go to state 45


State 166

   41 vet_dec: lit vet_dec .

    $default  reduce using rule 41 (vet_dec)


State 167

   10 dec: type TK_IDENTIFIER '[' exp ']' ':' vet_dec ';' .

    $default  reduce using rule 10 (dec)


State 168

   28 cmd: TK_IDENTIFIER '=' '[' exp ']' '#' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 174


State 169

   29 cmd: TK_IDENTIFIER '=' '[' exp ']' '&' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 175


State 170

   25 cmd: TK_IDENTIFIER '[' exp ']' '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 25 (cmd)


State 171

   26 cmd: '#' TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 176


State 172

   27 cmd: '&' TK_IDENTIFIER '[' exp ']' '=' . exp

    TK_IDENTIFIER  shift, and go to state 22
    LIT_INTEGER    shift, and go to state 23
    LIT_REAL       shift, and go to state 24
    LIT_CHAR       shift, and go to state 25
    '!'            shift, and go to state 26

    exp  go to state 177


State 173

    7 dec: KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' lcmd .

    $default  reduce using rule 7 (dec)


State 174

   28 cmd: TK_IDENTIFIER '=' '[' exp ']' '#' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 28 (cmd)


State 175

   29 cmd: TK_IDENTIFIER '=' '[' exp ']' '&' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 29 (cmd)


State 176

   26 cmd: '#' TK_IDENTIFIER '[' exp ']' '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 26 (cmd)


State 177

   27 cmd: '&' TK_IDENTIFIER '[' exp ']' '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   52    | exp . '<' exp
   53    | exp . '>' exp
   55    | exp . OPERATOR_LE exp
   56    | exp . OPERATOR_GE exp
   57    | exp . OPERATOR_EQ exp
   58    | exp . OPERATOR_NE exp
   59    | exp . OPERATOR_OR exp
   60    | exp . OPERATOR_AND exp

    OPERATOR_LE   shift, and go to state 49
    OPERATOR_GE   shift, and go to state 50
    OPERATOR_EQ   shift, and go to state 51
    OPERATOR_NE   shift, and go to state 52
    OPERATOR_AND  shift, and go to state 53
    OPERATOR_OR   shift, and go to state 54
    '+'           shift, and go to state 55
    '-'           shift, and go to state 56
    '*'           shift, and go to state 57
    '/'           shift, and go to state 58
    '<'           shift, and go to state 60
    '>'           shift, and go to state 61

    $default  reduce using rule 27 (cmd)
