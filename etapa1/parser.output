Nonterminals useless in grammar

   reset
   block
   dec
   ldec
   lcmd
   cmd
   var_dec
   type
   lit
   vet_dec
   exp
   func_call
   func_args
   l_func_args
   func_dec
   func_header
   func_par
   l_func_par
   op
   print
   pe
   lpe
   read


Terminals unused in grammar

   KW_CHAR
   KW_INT
   KW_FLOAT
   KW_IF
   KW_THEN
   KW_ELSE
   KW_WHILE
   KW_FOR
   KW_READ
   KW_RETURN
   KW_PRINT
   KW_TO
   OPERATOR_LE
   OPERATOR_GE
   OPERATOR_EQ
   OPERATOR_NE
   OPERATOR_AND
   OPERATOR_OR
   TK_IDENTIFIER
   LIT_INTEGER
   LIT_REAL
   LIT_CHAR
   LIT_STRING
   TOKEN_ERROR
   ','
   '{'
   '}'
   '('
   ')'
   ';'
   'e'
   '='
   '['
   ']'
   ':'
   '#'
   "'"
   '&'
   '+'
   '-'
   '*'
   '/'
   '<'
   '>'
   '!'


Rules useless in grammar

    2 program: ldec

    3 reset: ',' TK_IDENTIFIER reset
    4      | %empty

    5 block: '{' lcmd '}'

    6 dec: KW_IF '(' exp ')' KW_THEN cmd ';'
    7    | KW_IF '(' exp ')' KW_THEN cmd 'e' cmd ';'
    8    | KW_WHILE '(' exp ')' cmd ';'
    9    | KW_FOR '(' TK_IDENTIFIER '=' exp KW_TO exp ')' cmd

   10 ldec: dec ldec

   11 lcmd: cmd lcmd
   12     | %empty

   13 cmd: var_dec
   14    | block
   15    | read
   16    | print

   17 var_dec: type TK_IDENTIFIER '=' lit
   18        | type TK_IDENTIFIER '[' exp ']' ':' vet_dec ';'
   19        | type '#' TK_IDENTIFIER '=' lit

   20 type: KW_INT
   21     | KW_FLOAT
   22     | KW_CHAR

   23 lit: LIT_REAL
   24    | "'" LIT_CHAR "'"
   25    | LIT_INTEGER

   26 vet_dec: lit
   27        | %empty

   28 exp: TK_IDENTIFIER
   29    | lit
   30    | exp op exp
   31    | TK_IDENTIFIER '(' ')'
   32    | func_call

   33 func_call: TK_IDENTIFIER '(' func_args l_func_args ')'

   34 func_args: TK_IDENTIFIER ','
   35          | '#' TK_IDENTIFIER ','
   36          | '&' TK_IDENTIFIER ','
   37          | %empty

   38 l_func_args: func_args l_func_args
   39            | %empty

   40 func_dec: func_header block

   41 func_header: type TK_IDENTIFIER '(' func_par ')'

   42 func_par: type TK_IDENTIFIER
   43         | %empty

   44 l_func_par: func_par l_func_par
   45           | %empty

   46 op: '+'
   47   | '-'
   48   | '*'
   49   | '/'
   50   | '<'
   51   | '>'
   52   | '!'
   53   | OPERATOR_LE
   54   | OPERATOR_GE
   55   | OPERATOR_EQ
   56   | OPERATOR_NE
   57   | OPERATOR_AND
   58   | OPERATOR_OR

   59 print: KW_PRINT pe lpe

   60 pe: LIT_STRING
   61   | TK_IDENTIFIER

   62 lpe: LIT_STRING
   63    | TK_IDENTIFIER
   64    | %empty

   65 read: KW_READ TK_IDENTIFIER


Grammar

    0 $accept: program $end

    1 program: %empty


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'#' (35)
'&' (38)
'(' (40)
')' (41)
'*' (42)
'+' (43)
',' (44)
'-' (45)
'/' (47)
':' (58)
';' (59)
'<' (60)
'=' (61)
'>' (62)
'[' (91)
']' (93)
'e' (101)
'{' (123)
'}' (125)
error (256)
KW_CHAR (258)
KW_INT (259)
KW_FLOAT (260)
KW_IF (261)
KW_THEN (262)
KW_ELSE (263)
KW_WHILE (264)
KW_FOR (265)
KW_READ (266)
KW_RETURN (267)
KW_PRINT (268)
KW_TO (269)
OPERATOR_LE (270)
OPERATOR_GE (271)
OPERATOR_EQ (272)
OPERATOR_NE (273)
OPERATOR_AND (274)
OPERATOR_OR (275)
TK_IDENTIFIER (276)
LIT_INTEGER (277)
LIT_REAL (278)
LIT_CHAR (279)
LIT_STRING (280)
TOKEN_ERROR (281)
"'" (282)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


State 1

    0 $accept: program . $end

    $end  shift, and go to state 2


State 2

    0 $accept: program $end .

    $default  accept
